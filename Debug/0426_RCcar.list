
0426_RCcar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005740  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a40  08005a40  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005a40  08005a40  00006a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a48  08005a48  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a4c  08005a4c  00006a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005a50  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000068  08005ab8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08005ab8  00007414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001399f  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000305e  00000000  00000000  0001aa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db0  00000000  00000000  0001ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191ba  00000000  00000000  0001f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ef1  00000000  00000000  00038b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093294  00000000  00000000  00050a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  000e3d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e8db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058c8 	.word	0x080058c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080058c8 	.word	0x080058c8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim1, htim2, htim3;
extern UART_HandleTypeDef huart2;
uint8_t rcvData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <HAL_UART_RxCpltCallback+0x3c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d10f      	bne.n	80005c2 <HAL_UART_RxCpltCallback+0x32>
	{
		Listener_ISR_Process(rcvData);
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <HAL_UART_RxCpltCallback+0x40>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f94c 	bl	8000844 <Listener_ISR_Process>
		HAL_UART_Transmit(&huart2, &rcvData, 1, 100);
 80005ac:	2364      	movs	r3, #100	@ 0x64
 80005ae:	2201      	movs	r2, #1
 80005b0:	4907      	ldr	r1, [pc, #28]	@ (80005d0 <HAL_UART_RxCpltCallback+0x40>)
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <HAL_UART_RxCpltCallback+0x44>)
 80005b4:	f003 f9f4 	bl	80039a0 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rcvData, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4905      	ldr	r1, [pc, #20]	@ (80005d0 <HAL_UART_RxCpltCallback+0x40>)
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <HAL_UART_RxCpltCallback+0x44>)
 80005be:	f003 fa7a 	bl	8003ab6 <HAL_UART_Receive_IT>
		//HAL_UART_Transmit(&huart2, &rcvData, 1, 100);
	}
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40004400 	.word	0x40004400
 80005d0:	20000084 	.word	0x20000084
 80005d4:	20000278 	.word	0x20000278

080005d8 <AP_Main_init>:


void AP_Main_init()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &rcvData, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	490a      	ldr	r1, [pc, #40]	@ (8000608 <AP_Main_init+0x30>)
 80005e0:	480a      	ldr	r0, [pc, #40]	@ (800060c <AP_Main_init+0x34>)
 80005e2:	f003 fa68 	bl	8003ab6 <HAL_UART_Receive_IT>
	//sys_init();
	DelayInit();
 80005e6:	f000 fbcd 	bl	8000d84 <DelayInit>
	Que_Car_init();
 80005ea:	f000 faa7 	bl	8000b3c <Que_Car_init>
	Listener_init();
 80005ee:	f000 f947 	bl	8000880 <Listener_init>
	Model_hardwareinit(&htim3, &htim1, &htim2, &htim3);
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <AP_Main_init+0x38>)
 80005f4:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <AP_Main_init+0x3c>)
 80005f6:	4908      	ldr	r1, [pc, #32]	@ (8000618 <AP_Main_init+0x40>)
 80005f8:	4805      	ldr	r0, [pc, #20]	@ (8000610 <AP_Main_init+0x38>)
 80005fa:	f000 fad3 	bl	8000ba4 <Model_hardwareinit>
	Controller_Car_init();
 80005fe:	f000 f815 	bl	800062c <Controller_Car_init>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000084 	.word	0x20000084
 800060c:	20000278 	.word	0x20000278
 8000610:	20000230 	.word	0x20000230
 8000614:	200001e8 	.word	0x200001e8
 8000618:	200001a0 	.word	0x200001a0

0800061c <AP_Main_execute>:
void AP_Main_execute()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	Listener_CarMode_EventCheck();
 8000620:	f000 f93a 	bl	8000898 <Listener_CarMode_EventCheck>
	Controller_Car_execute();
 8000624:	f000 f81a 	bl	800065c <Controller_Car_execute>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <Controller_Car_init>:
 * 1. Motor : speed & action(forward, back, ...)
 * 2. UART : output data
 */

void Controller_Car_init()
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	prevCarModeState = OFF;
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <Controller_Car_init+0x24>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]

	MotorSpeed = 1000;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <Controller_Car_init+0x28>)
 8000638:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800063c:	801a      	strh	r2, [r3, #0]
	turnDiffSpeed = 300;
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <Controller_Car_init+0x2c>)
 8000640:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000644:	801a      	strh	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	20000085 	.word	0x20000085
 8000654:	20000086 	.word	0x20000086
 8000658:	20000088 	.word	0x20000088

0800065c <Controller_Car_execute>:

void Controller_Car_execute()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint8_t curCarModeState = Model_getCarModeState();
 8000662:	f000 fae5 	bl	8000c30 <Model_getCarModeState>
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	//uint8_t curCarModeState = LEFT_FORWARD;
	//curCarModeState = RIGHT_FORWARD;
	if(prevCarModeState == curCarModeState) return;
 800066a:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <Controller_Car_execute+0x90>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	429a      	cmp	r2, r3
 8000672:	d036      	beq.n	80006e2 <Controller_Car_execute+0x86>

	switch (curCarModeState)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b04      	cmp	r3, #4
 8000678:	d82f      	bhi.n	80006da <Controller_Car_execute+0x7e>
 800067a:	a201      	add	r2, pc, #4	@ (adr r2, 8000680 <Controller_Car_execute+0x24>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	08000695 	.word	0x08000695
 8000684:	0800069b 	.word	0x0800069b
 8000688:	080006a7 	.word	0x080006a7
 800068c:	080006b3 	.word	0x080006b3
 8000690:	080006c7 	.word	0x080006c7
	{
		case OFF:
			//stopMode();
			Controller_CarOFF_Run();
 8000694:	f000 f830 	bl	80006f8 <Controller_CarOFF_Run>
			break;
 8000698:	e01f      	b.n	80006da <Controller_Car_execute+0x7e>

		case FORWARD:
			Controller_CarForward_Run(MotorSpeed);
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <Controller_Car_execute+0x94>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f840 	bl	8000724 <Controller_CarForward_Run>
			break;
 80006a4:	e019      	b.n	80006da <Controller_Car_execute+0x7e>

		case BACKWARD:
			Controller_CarBackward_Run(MotorSpeed);
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <Controller_Car_execute+0x94>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f85c 	bl	8000768 <Controller_CarBackward_Run>
			break;
 80006b0:	e013      	b.n	80006da <Controller_Car_execute+0x7e>

		case RIGHT_FORWARD:
			Controller_CarRightForward_Run(MotorSpeed, turnDiffSpeed);
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <Controller_Car_execute+0x94>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <Controller_Car_execute+0x98>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	4610      	mov	r0, r2
 80006c0:	f000 f874 	bl	80007ac <Controller_CarRightForward_Run>
			break;
 80006c4:	e009      	b.n	80006da <Controller_Car_execute+0x7e>

		case LEFT_FORWARD:
			Controller_CarLeftForward_Run(MotorSpeed, turnDiffSpeed);
 80006c6:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <Controller_Car_execute+0x94>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <Controller_Car_execute+0x98>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4610      	mov	r0, r2
 80006d4:	f000 f890 	bl	80007f8 <Controller_CarLeftForward_Run>
			break;
 80006d8:	bf00      	nop
	}
	prevCarModeState = curCarModeState;
 80006da:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <Controller_Car_execute+0x90>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	7013      	strb	r3, [r2, #0]
 80006e0:	e000      	b.n	80006e4 <Controller_Car_execute+0x88>
	if(prevCarModeState == curCarModeState) return;
 80006e2:	bf00      	nop
}
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000085 	.word	0x20000085
 80006f0:	20000086 	.word	0x20000086
 80006f4:	20000088 	.word	0x20000088

080006f8 <Controller_CarOFF_Run>:

void Controller_CarOFF_Run()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	Motor_SetSpeed(&hLeftMotor, 0);
 80006fc:	2100      	movs	r1, #0
 80006fe:	4807      	ldr	r0, [pc, #28]	@ (800071c <Controller_CarOFF_Run+0x24>)
 8000700:	f000 fbe9 	bl	8000ed6 <Motor_SetSpeed>
	Motor_SetSpeed(&hRightMotor, 0);
 8000704:	2100      	movs	r1, #0
 8000706:	4806      	ldr	r0, [pc, #24]	@ (8000720 <Controller_CarOFF_Run+0x28>)
 8000708:	f000 fbe5 	bl	8000ed6 <Motor_SetSpeed>
	Presenter_Motor_Run(OFF);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f989 	bl	8000a24 <Presenter_Motor_Run>
	Presenter_UART_Run(OFF);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 f9c8 	bl	8000aa8 <Presenter_UART_Run>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000118 	.word	0x20000118
 8000720:	20000130 	.word	0x20000130

08000724 <Controller_CarForward_Run>:
void Controller_CarForward_Run(int speedVal)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if(speedVal > 1000) speedVal = 1000;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000732:	dd02      	ble.n	800073a <Controller_CarForward_Run+0x16>
 8000734:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000738:	607b      	str	r3, [r7, #4]
	Motor_SetSpeed(&hLeftMotor, speedVal);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	4808      	ldr	r0, [pc, #32]	@ (8000760 <Controller_CarForward_Run+0x3c>)
 800073e:	f000 fbca 	bl	8000ed6 <Motor_SetSpeed>
	Motor_SetSpeed(&hRightMotor, speedVal);
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <Controller_CarForward_Run+0x40>)
 8000746:	f000 fbc6 	bl	8000ed6 <Motor_SetSpeed>
	Presenter_Motor_Run(FORWARD);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 f96a 	bl	8000a24 <Presenter_Motor_Run>
	Presenter_UART_Run(FORWARD);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 f9a9 	bl	8000aa8 <Presenter_UART_Run>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000118 	.word	0x20000118
 8000764:	20000130 	.word	0x20000130

08000768 <Controller_CarBackward_Run>:
void Controller_CarBackward_Run(int speedVal)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if(speedVal > 1000) speedVal = 1000;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000776:	dd02      	ble.n	800077e <Controller_CarBackward_Run+0x16>
 8000778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077c:	607b      	str	r3, [r7, #4]
	Motor_SetSpeed(&hLeftMotor, speedVal);
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <Controller_CarBackward_Run+0x3c>)
 8000782:	f000 fba8 	bl	8000ed6 <Motor_SetSpeed>
	Motor_SetSpeed(&hRightMotor, speedVal);
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <Controller_CarBackward_Run+0x40>)
 800078a:	f000 fba4 	bl	8000ed6 <Motor_SetSpeed>
	Presenter_Motor_Run(BACKWARD);
 800078e:	2002      	movs	r0, #2
 8000790:	f000 f948 	bl	8000a24 <Presenter_Motor_Run>
	Presenter_UART_Run(BACKWARD);
 8000794:	2002      	movs	r0, #2
 8000796:	f000 f987 	bl	8000aa8 <Presenter_UART_Run>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000118 	.word	0x20000118
 80007a8:	20000130 	.word	0x20000130

080007ac <Controller_CarRightForward_Run>:
void Controller_CarRightForward_Run(int speedVal, int speedDif)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	if(speedVal > 1000) speedVal = 1000;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007bc:	dd02      	ble.n	80007c4 <Controller_CarRightForward_Run+0x18>
 80007be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c2:	607b      	str	r3, [r7, #4]
	//if((speedVal+speedDif) > 1000) speedVal = 1000-speedDif;
	Motor_SetSpeed(&hLeftMotor, speedVal);
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <Controller_CarRightForward_Run+0x44>)
 80007c8:	f000 fb85 	bl	8000ed6 <Motor_SetSpeed>
	Motor_SetSpeed(&hRightMotor, speedVal-speedDif);
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <Controller_CarRightForward_Run+0x48>)
 80007d6:	f000 fb7e 	bl	8000ed6 <Motor_SetSpeed>
	Presenter_Motor_Run(RIGHT_FORWARD);
 80007da:	2003      	movs	r0, #3
 80007dc:	f000 f922 	bl	8000a24 <Presenter_Motor_Run>
	Presenter_UART_Run(RIGHT_FORWARD);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f961 	bl	8000aa8 <Presenter_UART_Run>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000118 	.word	0x20000118
 80007f4:	20000130 	.word	0x20000130

080007f8 <Controller_CarLeftForward_Run>:
void Controller_CarLeftForward_Run(int speedVal, int speedDif)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	if(speedVal > 1000) speedVal = 1000;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000808:	dd02      	ble.n	8000810 <Controller_CarLeftForward_Run+0x18>
 800080a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800080e:	607b      	str	r3, [r7, #4]
	//if(speedVal<speedDif) speedVal = 1000-speedDif;
	Motor_SetSpeed(&hLeftMotor, speedVal-speedDif);
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	4619      	mov	r1, r3
 8000818:	4808      	ldr	r0, [pc, #32]	@ (800083c <Controller_CarLeftForward_Run+0x44>)
 800081a:	f000 fb5c 	bl	8000ed6 <Motor_SetSpeed>
	Motor_SetSpeed(&hRightMotor, speedVal);
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4807      	ldr	r0, [pc, #28]	@ (8000840 <Controller_CarLeftForward_Run+0x48>)
 8000822:	f000 fb58 	bl	8000ed6 <Motor_SetSpeed>
	Presenter_Motor_Run(LEFT_FORWARD);
 8000826:	2004      	movs	r0, #4
 8000828:	f000 f8fc 	bl	8000a24 <Presenter_Motor_Run>
	Presenter_UART_Run(LEFT_FORWARD);
 800082c:	2004      	movs	r0, #4
 800082e:	f000 f93b 	bl	8000aa8 <Presenter_UART_Run>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000118 	.word	0x20000118
 8000840:	20000130 	.word	0x20000130

08000844 <Listener_ISR_Process>:
 * 1. Receive a string via UART to decide modeState & save in Model
 *
 */

void Listener_ISR_Process(uint8_t rcvData)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	if(rcvData == '\n')			// Check the last char in a string
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b0a      	cmp	r3, #10
 8000852:	d109      	bne.n	8000868 <Listener_ISR_Process+0x24>
	{
		rxFlag = 1;
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <Listener_ISR_Process+0x34>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		printf("rxFlag : %d  rxCmplt\n", rxFlag);		// for debugㅡㅡㅡㅡㅡㅡㅡㅡ
 800085a:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <Listener_ISR_Process+0x34>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	4806      	ldr	r0, [pc, #24]	@ (800087c <Listener_ISR_Process+0x38>)
 8000862:	f004 f965 	bl	8004b30 <iprintf>
		return;
 8000866:	e003      	b.n	8000870 <Listener_ISR_Process+0x2c>
	}
	enQue_CarModeState(rcvData);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f970 	bl	8000b50 <enQue_CarModeState>
}
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000a2 	.word	0x200000a2
 800087c:	080058e0 	.word	0x080058e0

08000880 <Listener_init>:

void Listener_init()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	CarModeState_Li = OFF;
 8000884:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <Listener_init+0x14>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	Listener_clearModeBuf();
 800088a:	f000 f8b1 	bl	80009f0 <Listener_clearModeBuf>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000a1 	.word	0x200000a1

08000898 <Listener_CarMode_EventCheck>:

void Listener_CarMode_EventCheck()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	if(!rxFlag) return;
 800089e:	4b47      	ldr	r3, [pc, #284]	@ (80009bc <Listener_CarMode_EventCheck+0x124>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 8085 	beq.w	80009b2 <Listener_CarMode_EventCheck+0x11a>
  uint8_t ch = deQue_CarModeState();
 80008a8:	f000 f962 	bl	8000b70 <deQue_CarModeState>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	if(ch)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d013      	beq.n	80008de <Listener_CarMode_EventCheck+0x46>
	{
		static int iii = 0;								// for debugㅡㅡㅡㅡㅡㅡㅡㅡ
		printf("%d   %c\n", iii++, ch);		// for debugㅡㅡㅡㅡㅡㅡㅡㅡ
 80008b6:	4b42      	ldr	r3, [pc, #264]	@ (80009c0 <Listener_CarMode_EventCheck+0x128>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	4940      	ldr	r1, [pc, #256]	@ (80009c0 <Listener_CarMode_EventCheck+0x128>)
 80008be:	600a      	str	r2, [r1, #0]
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	4619      	mov	r1, r3
 80008c4:	483f      	ldr	r0, [pc, #252]	@ (80009c4 <Listener_CarMode_EventCheck+0x12c>)
 80008c6:	f004 f933 	bl	8004b30 <iprintf>
		CarModeBuf[index_carmodebuf++] = ch;
 80008ca:	4b3f      	ldr	r3, [pc, #252]	@ (80009c8 <Listener_CarMode_EventCheck+0x130>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	b2d1      	uxtb	r1, r2
 80008d2:	4a3d      	ldr	r2, [pc, #244]	@ (80009c8 <Listener_CarMode_EventCheck+0x130>)
 80008d4:	7011      	strb	r1, [r2, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4a3c      	ldr	r2, [pc, #240]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	5453      	strb	r3, [r2, r1]
	}

	if (strcmp(CarModeBuf, "OFF") == 0)
 80008de:	493c      	ldr	r1, [pc, #240]	@ (80009d0 <Listener_CarMode_EventCheck+0x138>)
 80008e0:	483a      	ldr	r0, [pc, #232]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 80008e2:	f7ff fc7d 	bl	80001e0 <strcmp>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10c      	bne.n	8000906 <Listener_CarMode_EventCheck+0x6e>
	{
		CarModeState_Li = OFF;
 80008ec:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 80008f2:	4b38      	ldr	r3, [pc, #224]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f9a6 	bl	8000c48 <Model_setCarModeState>
		printf("Buffer : %s  compareSuc\n", CarModeBuf);		// for debugㅡㅡㅡㅡㅡㅡㅡ
 80008fc:	4933      	ldr	r1, [pc, #204]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 80008fe:	4836      	ldr	r0, [pc, #216]	@ (80009d8 <Listener_CarMode_EventCheck+0x140>)
 8000900:	f004 f916 	bl	8004b30 <iprintf>
 8000904:	e046      	b.n	8000994 <Listener_CarMode_EventCheck+0xfc>
	}
	else if (strcmp(CarModeBuf, "FORW") == 0)
 8000906:	4935      	ldr	r1, [pc, #212]	@ (80009dc <Listener_CarMode_EventCheck+0x144>)
 8000908:	4830      	ldr	r0, [pc, #192]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 800090a:	f7ff fc69 	bl	80001e0 <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10c      	bne.n	800092e <Listener_CarMode_EventCheck+0x96>
	{
		CarModeState_Li = FORWARD;
 8000914:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 800091a:	4b2e      	ldr	r3, [pc, #184]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f992 	bl	8000c48 <Model_setCarModeState>
		printf("Buffer : %s  compareSuc\n", CarModeBuf);		// for debugㅡㅡㅡㅡㅡㅡㅡ
 8000924:	4929      	ldr	r1, [pc, #164]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 8000926:	482c      	ldr	r0, [pc, #176]	@ (80009d8 <Listener_CarMode_EventCheck+0x140>)
 8000928:	f004 f902 	bl	8004b30 <iprintf>
 800092c:	e032      	b.n	8000994 <Listener_CarMode_EventCheck+0xfc>
	}
	else if (strcmp(CarModeBuf, "BACK") == 0)
 800092e:	492c      	ldr	r1, [pc, #176]	@ (80009e0 <Listener_CarMode_EventCheck+0x148>)
 8000930:	4826      	ldr	r0, [pc, #152]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 8000932:	f7ff fc55 	bl	80001e0 <strcmp>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10c      	bne.n	8000956 <Listener_CarMode_EventCheck+0xbe>
	{
		CarModeState_Li = BACKWARD;
 800093c:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 800093e:	2202      	movs	r2, #2
 8000940:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f97e 	bl	8000c48 <Model_setCarModeState>
		printf("Buffer : %s  compareSuc\n", CarModeBuf);		// for debugㅡㅡㅡㅡㅡㅡㅡ
 800094c:	491f      	ldr	r1, [pc, #124]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 800094e:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <Listener_CarMode_EventCheck+0x140>)
 8000950:	f004 f8ee 	bl	8004b30 <iprintf>
 8000954:	e01e      	b.n	8000994 <Listener_CarMode_EventCheck+0xfc>
	}
	else if (strcmp(CarModeBuf, "RIGHT") == 0)
 8000956:	4923      	ldr	r1, [pc, #140]	@ (80009e4 <Listener_CarMode_EventCheck+0x14c>)
 8000958:	481c      	ldr	r0, [pc, #112]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 800095a:	f7ff fc41 	bl	80001e0 <strcmp>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d108      	bne.n	8000976 <Listener_CarMode_EventCheck+0xde>
	{
		CarModeState_Li = RIGHT_FORWARD;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 8000966:	2203      	movs	r2, #3
 8000968:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f96a 	bl	8000c48 <Model_setCarModeState>
 8000974:	e00e      	b.n	8000994 <Listener_CarMode_EventCheck+0xfc>
	}
	else if (strcmp(CarModeBuf, "LEFT") == 0)
 8000976:	491c      	ldr	r1, [pc, #112]	@ (80009e8 <Listener_CarMode_EventCheck+0x150>)
 8000978:	4814      	ldr	r0, [pc, #80]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 800097a:	f7ff fc31 	bl	80001e0 <strcmp>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d107      	bne.n	8000994 <Listener_CarMode_EventCheck+0xfc>
	{
		CarModeState_Li = LEFT_FORWARD;
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 8000986:	2204      	movs	r2, #4
 8000988:	701a      	strb	r2, [r3, #0]
		Model_setCarModeState(CarModeState_Li);
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <Listener_CarMode_EventCheck+0x13c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f95a 	bl	8000c48 <Model_setCarModeState>
	}

	if(Que_Car_isEmpty())
 8000994:	f000 f8fc 	bl	8000b90 <Que_Car_isEmpty>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00a      	beq.n	80009b4 <Listener_CarMode_EventCheck+0x11c>
	{
		printf("Buffer : %s  queEmpty\n", CarModeBuf);		// for debugㅡㅡㅡㅡㅡㅡㅡ
 800099e:	490b      	ldr	r1, [pc, #44]	@ (80009cc <Listener_CarMode_EventCheck+0x134>)
 80009a0:	4812      	ldr	r0, [pc, #72]	@ (80009ec <Listener_CarMode_EventCheck+0x154>)
 80009a2:	f004 f8c5 	bl	8004b30 <iprintf>
		rxFlag = 0;
 80009a6:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <Listener_CarMode_EventCheck+0x124>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
		Listener_clearModeBuf();
 80009ac:	f000 f820 	bl	80009f0 <Listener_clearModeBuf>
 80009b0:	e000      	b.n	80009b4 <Listener_CarMode_EventCheck+0x11c>
	if(!rxFlag) return;
 80009b2:	bf00      	nop
	}
}
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000a2 	.word	0x200000a2
 80009c0:	200000a4 	.word	0x200000a4
 80009c4:	080058f8 	.word	0x080058f8
 80009c8:	200000a0 	.word	0x200000a0
 80009cc:	2000008c 	.word	0x2000008c
 80009d0:	08005904 	.word	0x08005904
 80009d4:	200000a1 	.word	0x200000a1
 80009d8:	08005908 	.word	0x08005908
 80009dc:	08005924 	.word	0x08005924
 80009e0:	0800592c 	.word	0x0800592c
 80009e4:	08005934 	.word	0x08005934
 80009e8:	0800593c 	.word	0x0800593c
 80009ec:	08005944 	.word	0x08005944

080009f0 <Listener_clearModeBuf>:

void Listener_clearModeBuf()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	memset(CarModeBuf, '\0', 20);
 80009f4:	2214      	movs	r2, #20
 80009f6:	2100      	movs	r1, #0
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <Listener_clearModeBuf+0x24>)
 80009fa:	f004 f9e1 	bl	8004dc0 <memset>
	index_carmodebuf = 0;
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <Listener_clearModeBuf+0x28>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	printf("ClearBuffer\n");		// for debug---------------
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <Listener_clearModeBuf+0x2c>)
 8000a06:	f004 f8fb 	bl	8004c00 <puts>
	printf("--------------------------\n");
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <Listener_clearModeBuf+0x30>)
 8000a0c:	f004 f8f8 	bl	8004c00 <puts>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000008c 	.word	0x2000008c
 8000a18:	200000a0 	.word	0x200000a0
 8000a1c:	0800595c 	.word	0x0800595c
 8000a20:	08005968 	.word	0x08005968

08000a24 <Presenter_Motor_Run>:
 * 2. Motor : Forward, Back, ...
 *
 */

void Presenter_Motor_Run(uint8_t state)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d830      	bhi.n	8000a96 <Presenter_Motor_Run+0x72>
 8000a34:	a201      	add	r2, pc, #4	@ (adr r2, 8000a3c <Presenter_Motor_Run+0x18>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a51 	.word	0x08000a51
 8000a40:	08000a5f 	.word	0x08000a5f
 8000a44:	08000a6d 	.word	0x08000a6d
 8000a48:	08000a7b 	.word	0x08000a7b
 8000a4c:	08000a89 	.word	0x08000a89
	{
		case OFF:
			Motor_Stop(&hLeftMotor);
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <Presenter_Motor_Run+0x7c>)
 8000a52:	f000 f9e0 	bl	8000e16 <Motor_Stop>
			Motor_Stop(&hRightMotor);
 8000a56:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <Presenter_Motor_Run+0x80>)
 8000a58:	f000 f9dd 	bl	8000e16 <Motor_Stop>
			break;
 8000a5c:	e01b      	b.n	8000a96 <Presenter_Motor_Run+0x72>

		case FORWARD:
			Motor_Forward(&hLeftMotor);
 8000a5e:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <Presenter_Motor_Run+0x7c>)
 8000a60:	f000 f9f9 	bl	8000e56 <Motor_Forward>
			Motor_Forward(&hRightMotor);
 8000a64:	480f      	ldr	r0, [pc, #60]	@ (8000aa4 <Presenter_Motor_Run+0x80>)
 8000a66:	f000 f9f6 	bl	8000e56 <Motor_Forward>
			break;
 8000a6a:	e014      	b.n	8000a96 <Presenter_Motor_Run+0x72>

		case BACKWARD:
			Motor_Backward(&hLeftMotor);
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <Presenter_Motor_Run+0x7c>)
 8000a6e:	f000 fa12 	bl	8000e96 <Motor_Backward>
			Motor_Backward(&hRightMotor);
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <Presenter_Motor_Run+0x80>)
 8000a74:	f000 fa0f 	bl	8000e96 <Motor_Backward>
			break;
 8000a78:	e00d      	b.n	8000a96 <Presenter_Motor_Run+0x72>

		case RIGHT_FORWARD:
			Motor_Forward(&hLeftMotor);
 8000a7a:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <Presenter_Motor_Run+0x7c>)
 8000a7c:	f000 f9eb 	bl	8000e56 <Motor_Forward>
			Motor_Forward(&hRightMotor);
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <Presenter_Motor_Run+0x80>)
 8000a82:	f000 f9e8 	bl	8000e56 <Motor_Forward>
			break;
 8000a86:	e006      	b.n	8000a96 <Presenter_Motor_Run+0x72>

		case LEFT_FORWARD:
			Motor_Forward(&hLeftMotor);
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <Presenter_Motor_Run+0x7c>)
 8000a8a:	f000 f9e4 	bl	8000e56 <Motor_Forward>
			Motor_Forward(&hRightMotor);
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <Presenter_Motor_Run+0x80>)
 8000a90:	f000 f9e1 	bl	8000e56 <Motor_Forward>
			break;
 8000a94:	bf00      	nop
	}
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000118 	.word	0x20000118
 8000aa4:	20000130 	.word	0x20000130

08000aa8 <Presenter_UART_Run>:

void Presenter_UART_Run(uint8_t state)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d830      	bhi.n	8000b1a <Presenter_UART_Run+0x72>
 8000ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac0 <Presenter_UART_Run+0x18>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000ae3 	.word	0x08000ae3
 8000ac8:	08000af1 	.word	0x08000af1
 8000acc:	08000aff 	.word	0x08000aff
 8000ad0:	08000b0d 	.word	0x08000b0d
	{
		case OFF:
			printf("Mode : OFF\n");
 8000ad4:	4813      	ldr	r0, [pc, #76]	@ (8000b24 <Presenter_UART_Run+0x7c>)
 8000ad6:	f004 f893 	bl	8004c00 <puts>
			printf("--------------------------\n");
 8000ada:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000adc:	f004 f890 	bl	8004c00 <puts>
			break;
 8000ae0:	e01b      	b.n	8000b1a <Presenter_UART_Run+0x72>

		case FORWARD:
			printf("Mode : Forward\n");
 8000ae2:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <Presenter_UART_Run+0x84>)
 8000ae4:	f004 f88c 	bl	8004c00 <puts>
			printf("--------------------------\n");
 8000ae8:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000aea:	f004 f889 	bl	8004c00 <puts>
			break;
 8000aee:	e014      	b.n	8000b1a <Presenter_UART_Run+0x72>

		case BACKWARD:
			printf("Mode : Backward\n");
 8000af0:	480f      	ldr	r0, [pc, #60]	@ (8000b30 <Presenter_UART_Run+0x88>)
 8000af2:	f004 f885 	bl	8004c00 <puts>
			printf("--------------------------\n");
 8000af6:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000af8:	f004 f882 	bl	8004c00 <puts>
			break;
 8000afc:	e00d      	b.n	8000b1a <Presenter_UART_Run+0x72>

		case RIGHT_FORWARD:
			printf("Mode : RightForward\n");
 8000afe:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <Presenter_UART_Run+0x8c>)
 8000b00:	f004 f87e 	bl	8004c00 <puts>
			printf("--------------------------\n");
 8000b04:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000b06:	f004 f87b 	bl	8004c00 <puts>
			break;
 8000b0a:	e006      	b.n	8000b1a <Presenter_UART_Run+0x72>

		case LEFT_FORWARD:
			printf("Mode : LeftForward\n");
 8000b0c:	480a      	ldr	r0, [pc, #40]	@ (8000b38 <Presenter_UART_Run+0x90>)
 8000b0e:	f004 f877 	bl	8004c00 <puts>
			printf("--------------------------\n");
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <Presenter_UART_Run+0x80>)
 8000b14:	f004 f874 	bl	8004c00 <puts>
			break;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	08005984 	.word	0x08005984
 8000b28:	08005990 	.word	0x08005990
 8000b2c:	080059ac 	.word	0x080059ac
 8000b30:	080059bc 	.word	0x080059bc
 8000b34:	080059cc 	.word	0x080059cc
 8000b38:	080059e0 	.word	0x080059e0

08000b3c <Que_Car_init>:
 */

Que_t carmodeQue;

void Que_Car_init()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	Que_init(&carmodeQue);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <Que_Car_init+0x10>)
 8000b42:	f000 f891 	bl	8000c68 <Que_init>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000a8 	.word	0x200000a8

08000b50 <enQue_CarModeState>:

void enQue_CarModeState(uint8_t data)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	enQue(&carmodeQue, data);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <enQue_CarModeState+0x1c>)
 8000b60:	f000 f8b8 	bl	8000cd4 <enQue>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200000a8 	.word	0x200000a8

08000b70 <deQue_CarModeState>:

uint8_t deQue_CarModeState()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	uint8_t temp = deQue(&carmodeQue);
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <deQue_CarModeState+0x1c>)
 8000b78:	f000 f8d8 	bl	8000d2c <deQue>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]

	return temp;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000a8 	.word	0x200000a8

08000b90 <Que_Car_isEmpty>:

int Que_Car_isEmpty()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	return QueEmpty(&carmodeQue);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <Que_Car_isEmpty+0x10>)
 8000b96:	f000 f88b 	bl	8000cb0 <QueEmpty>
 8000b9a:	4603      	mov	r3, r0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000a8 	.word	0x200000a8

08000ba4 <Model_hardwareinit>:
uint8_t CarModeState_Mo;


void Model_hardwareinit(TIM_HandleTypeDef *motor_htim, TIM_HandleTypeDef *UltraLeft_htim,
		TIM_HandleTypeDef *UltraCenter_htim, TIM_HandleTypeDef *UltraRight_htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af04      	add	r7, sp, #16
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
	Motor_init(&hLeftMotor, motor_htim, TIM_CHANNEL_1, LEFT_DIR1_Port,
 8000bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <Model_hardwareinit+0x4c>)
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	2380      	movs	r3, #128	@ 0x80
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <Model_hardwareinit+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	68f9      	ldr	r1, [r7, #12]
 8000bc6:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <Model_hardwareinit+0x54>)
 8000bc8:	f000 f906 	bl	8000dd8 <Motor_init>
			LEFT_DIR1_Port_Pin, LEFT_DIR2_Port, LEFT_DIR2_Port_Pin);
	Motor_init(&hRightMotor, motor_htim, TIM_CHANNEL_2, RIGHT_DIR1_Port,
 8000bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <Model_hardwareinit+0x58>)
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <Model_hardwareinit+0x4c>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	68f9      	ldr	r1, [r7, #12]
 8000be2:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <Model_hardwareinit+0x5c>)
 8000be4:	f000 f8f8 	bl	8000dd8 <Motor_init>
			RIGHT_DIR1_Port_Pin, RIGHT_DIR2_Port, RIGHT_DIR2_Port_Pin);
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	20000118 	.word	0x20000118
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	20000130 	.word	0x20000130

08000c04 <_write>:


int _write(int file, char *ptr, int len)		// for printf() function
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 1000);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <_write+0x28>)
 8000c1c:	f002 fec0 	bl	80039a0 <HAL_UART_Transmit>

	return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000278 	.word	0x20000278

08000c30 <Model_getCarModeState>:


uint8_t Model_getCarModeState()
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	return CarModeState_Mo;
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <Model_getCarModeState+0x14>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000148 	.word	0x20000148

08000c48 <Model_setCarModeState>:
void Model_setCarModeState(uint8_t data)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	CarModeState_Mo = data;
 8000c52:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <Model_setCarModeState+0x1c>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	7013      	strb	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	20000148 	.word	0x20000148

08000c68 <Que_init>:
 */

#include "Queue.h"

void Que_init(Que_t *Que)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	Que->head = 0;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	669a      	str	r2, [r3, #104]	@ 0x68
	Que->tail = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	665a      	str	r2, [r3, #100]	@ 0x64
	Que->QueCounter = 0;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <QueFull>:

uint8_t QueFull(Que_t *Que)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	//if(head == ((tail+1) % BUF_SIZE))
	if(Que->QueCounter == BUF_SIZE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000c9a:	2b64      	cmp	r3, #100	@ 0x64
 8000c9c:	d101      	bne.n	8000ca2 <QueFull+0x14>
		return 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <QueFull+0x16>
	else
		return 0;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <QueEmpty>:
uint8_t QueEmpty(Que_t *Que)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	//if(head == tail)
	if(Que->QueCounter == 0)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <QueEmpty+0x14>
		return 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <QueEmpty+0x16>
	else
		return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <enQue>:

void enQue(Que_t *Que, uint8_t data)			// push(write)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
	if(QueFull(Que)) return;
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ffd4 	bl	8000c8e <QueFull>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d119      	bne.n	8000d20 <enQue+0x4c>

	Que->QueBuff[Que->tail] = data;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	78f9      	ldrb	r1, [r7, #3]
 8000cf4:	54d1      	strb	r1, [r2, r3]
	Que->tail = (Que->tail+1) % BUF_SIZE;			// tail : 0~3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <enQue+0x54>)
 8000cfe:	fb83 1302 	smull	r1, r3, r3, r2
 8000d02:	1159      	asrs	r1, r3, #5
 8000d04:	17d3      	asrs	r3, r2, #31
 8000d06:	1acb      	subs	r3, r1, r3
 8000d08:	2164      	movs	r1, #100	@ 0x64
 8000d0a:	fb01 f303 	mul.w	r3, r1, r3
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	6653      	str	r3, [r2, #100]	@ 0x64
	Que->QueCounter++;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000d1e:	e000      	b.n	8000d22 <enQue+0x4e>
	if(QueFull(Que)) return;
 8000d20:	bf00      	nop
}
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	51eb851f 	.word	0x51eb851f

08000d2c <deQue>:

uint8_t deQue(Que_t *Que)			// pop(read)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if(QueEmpty(Que)) return 0;
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ffbb 	bl	8000cb0 <QueEmpty>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <deQue+0x18>
 8000d40:	2300      	movs	r3, #0
 8000d42:	e019      	b.n	8000d78 <deQue+0x4c>

	uint8_t temp = Que->QueBuff[Que->head];
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	73fb      	strb	r3, [r7, #15]
	Que->head = (Que->head+1) % BUF_SIZE;			// head : 0~3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <deQue+0x54>)
 8000d56:	fb83 1302 	smull	r1, r3, r3, r2
 8000d5a:	1159      	asrs	r1, r3, #5
 8000d5c:	17d3      	asrs	r3, r2, #31
 8000d5e:	1acb      	subs	r3, r1, r3
 8000d60:	2164      	movs	r1, #100	@ 0x64
 8000d62:	fb01 f303 	mul.w	r3, r1, r3
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6693      	str	r3, [r2, #104]	@ 0x68
	Que->QueCounter--;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000d70:	1e5a      	subs	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	66da      	str	r2, [r3, #108]	@ 0x6c

	return temp;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	51eb851f 	.word	0x51eb851f

08000d84 <DelayInit>:

#include "delayUS.h"


void DelayInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <DelayInit+0x4c>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <DelayInit+0x4c>)
 8000d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000d92:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <DelayInit+0x4c>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <DelayInit+0x4c>)
 8000d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d9e:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <DelayInit+0x50>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <DelayInit+0x50>)
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <DelayInit+0x50>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <DelayInit+0x50>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <DelayInit+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8000dbe:	bf00      	nop
	__ASM volatile ("NOP");
 8000dc0:	bf00      	nop
	__ASM volatile ("NOP");
 8000dc2:	bf00      	nop
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000edf0 	.word	0xe000edf0
 8000dd4:	e0001000 	.word	0xe0001000

08000dd8 <Motor_init>:
void Motor_init(Motor_t *Motor,
			TIM_HandleTypeDef *htim,
			uint32_t Channel,
			GPIO_TypeDef *Dir1_GPIO, uint16_t Dir1_GPIO_Pin,
			GPIO_TypeDef *Dir2_GPIO, uint16_t Dir2_GPIO_Pin)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	Motor->htim = htim;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	601a      	str	r2, [r3, #0]
	Motor->Channel = Channel;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	605a      	str	r2, [r3, #4]
	Motor->Dir1_GPIO = Dir1_GPIO;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	609a      	str	r2, [r3, #8]
	Motor->Dir1_GPIO_Pin = Dir1_GPIO_Pin;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	8b3a      	ldrh	r2, [r7, #24]
 8000dfc:	819a      	strh	r2, [r3, #12]
	Motor->Dir2_GPIO = Dir2_GPIO;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	611a      	str	r2, [r3, #16]
	Motor->Dir2_GPIO_Pin = Dir2_GPIO_Pin;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	8c3a      	ldrh	r2, [r7, #32]
 8000e08:	829a      	strh	r2, [r3, #20]

}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <Motor_Stop>:
void Motor_Stop(Motor_t *Motor)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->Dir1_GPIO, Motor->Dir1_GPIO_Pin, RESET);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6898      	ldr	r0, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	899b      	ldrh	r3, [r3, #12]
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f001 f8e7 	bl	8001ffc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->Dir2_GPIO, Motor->Dir2_GPIO_Pin, RESET);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6918      	ldr	r0, [r3, #16]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	8a9b      	ldrh	r3, [r3, #20]
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f001 f8df 	bl	8001ffc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(Motor->htim, Motor->Channel);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4619      	mov	r1, r3
 8000e48:	4610      	mov	r0, r2
 8000e4a:	f002 f825 	bl	8002e98 <HAL_TIM_PWM_Stop>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <Motor_Forward>:
void Motor_Forward(Motor_t *Motor)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->Dir1_GPIO, Motor->Dir1_GPIO_Pin, RESET);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6898      	ldr	r0, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	899b      	ldrh	r3, [r3, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f001 f8c7 	bl	8001ffc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->Dir2_GPIO, Motor->Dir2_GPIO_Pin, SET);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6918      	ldr	r0, [r3, #16]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	8a9b      	ldrh	r3, [r3, #20]
 8000e76:	2201      	movs	r2, #1
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f001 f8bf 	bl	8001ffc <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	4619      	mov	r1, r3
 8000e88:	4610      	mov	r0, r2
 8000e8a:	f001 ff55 	bl	8002d38 <HAL_TIM_PWM_Start>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <Motor_Backward>:
void Motor_Backward(Motor_t *Motor)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Motor->Dir1_GPIO, Motor->Dir1_GPIO_Pin, SET);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6898      	ldr	r0, [r3, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	899b      	ldrh	r3, [r3, #12]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f001 f8a7 	bl	8001ffc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor->Dir2_GPIO, Motor->Dir2_GPIO_Pin, RESET);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6918      	ldr	r0, [r3, #16]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	8a9b      	ldrh	r3, [r3, #20]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f001 f89f 	bl	8001ffc <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(Motor->htim, Motor->Channel);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f001 ff35 	bl	8002d38 <HAL_TIM_PWM_Start>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Motor_SetSpeed>:

void Motor_SetSpeed(Motor_t *Motor, int speedVal)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d105      	bne.n	8000ef4 <Motor_SetSpeed+0x1e>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ef2:	e018      	b.n	8000f26 <Motor_SetSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d105      	bne.n	8000f08 <Motor_SetSpeed+0x32>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f06:	e00e      	b.n	8000f26 <Motor_SetSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d105      	bne.n	8000f1c <Motor_SetSpeed+0x46>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f1a:	e004      	b.n	8000f26 <Motor_SetSpeed+0x50>
	__HAL_TIM_SET_COMPARE(Motor->htim, Motor->Channel, speedVal);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f000 fcc7 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f811 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 f9ed 	bl	800131c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f42:	f000 f875 	bl	8001030 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f46:	f000 f93d 	bl	80011c4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f4a:	f000 f9bd 	bl	80012c8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f4e:	f000 f89d 	bl	800108c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f52:	f000 f8eb 	bl	800112c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  AP_Main_init();
 8000f56:	f7ff fb3f 	bl	80005d8 <AP_Main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	AP_Main_execute();
 8000f5a:	f7ff fb5f 	bl	800061c <AP_Main_execute>
 8000f5e:	e7fc      	b.n	8000f5a <main+0x28>

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	@ 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 ff26 	bl	8004dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <SystemClock_Config+0xc8>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a26      	ldr	r2, [pc, #152]	@ (8001028 <SystemClock_Config+0xc8>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <SystemClock_Config+0xc8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b21      	ldr	r3, [pc, #132]	@ (800102c <SystemClock_Config+0xcc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a20      	ldr	r2, [pc, #128]	@ (800102c <SystemClock_Config+0xcc>)
 8000faa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <SystemClock_Config+0xcc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fd4:	2364      	movs	r3, #100	@ 0x64
 8000fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f967 	bl	80022b8 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff0:	f000 fa20 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2103      	movs	r1, #3
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fbc9 	bl	80027a8 <HAL_RCC_ClockConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800101c:	f000 fa0a 	bl	8001434 <Error_Handler>
  }
}
 8001020:	bf00      	nop
 8001022:	3750      	adds	r7, #80	@ 0x50
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001036:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <MX_I2C1_Init+0x54>)
 8001038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_I2C1_Init+0x50>)
 800103c:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <MX_I2C1_Init+0x58>)
 800103e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_I2C1_Init+0x50>)
 800104e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_I2C1_Init+0x50>)
 800106e:	f000 ffdf 	bl	8002030 <HAL_I2C_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001078:	f000 f9dc 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000014c 	.word	0x2000014c
 8001084:	40005400 	.word	0x40005400
 8001088:	000186a0 	.word	0x000186a0

0800108c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <MX_TIM1_Init+0x9c>)
 80010ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010b0:	2263      	movs	r2, #99	@ 0x63
 80010b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d4:	4813      	ldr	r0, [pc, #76]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010d6:	f001 fd87 	bl	8002be8 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80010e0:	f000 f9a8 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <MX_TIM1_Init+0x98>)
 80010f2:	f001 fff7 	bl	80030e4 <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80010fc:	f000 f99a 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_TIM1_Init+0x98>)
 800110e:	f002 fb89 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001118:	f000 f98c 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200001a0 	.word	0x200001a0
 8001128:	40010000 	.word	0x40010000

0800112c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001148:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <MX_TIM2_Init+0x94>)
 800114a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800114e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001150:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <MX_TIM2_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <MX_TIM2_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <MX_TIM2_Init+0x94>)
 800115e:	f04f 32ff 	mov.w	r2, #4294967295
 8001162:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <MX_TIM2_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <MX_TIM2_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001170:	4813      	ldr	r0, [pc, #76]	@ (80011c0 <MX_TIM2_Init+0x94>)
 8001172:	f001 fd39 	bl	8002be8 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800117c:	f000 f95a 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <MX_TIM2_Init+0x94>)
 800118e:	f001 ffa9 	bl	80030e4 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001198:	f000 f94c 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <MX_TIM2_Init+0x94>)
 80011aa:	f002 fb3b 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 f93e 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001e8 	.word	0x200001e8

080011c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	@ 0x38
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 80011f6:	4a33      	ldr	r2, [pc, #204]	@ (80012c4 <MX_TIM3_Init+0x100>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80011fa:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001206:	4b2e      	ldr	r3, [pc, #184]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 8001208:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800120c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800121a:	4829      	ldr	r0, [pc, #164]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 800121c:	f001 fce4 	bl	8002be8 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001226:	f000 f905 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001234:	4619      	mov	r1, r3
 8001236:	4822      	ldr	r0, [pc, #136]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 8001238:	f001 ff54 	bl	80030e4 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001242:	f000 f8f7 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001246:	481e      	ldr	r0, [pc, #120]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 8001248:	f001 fd1d 	bl	8002c86 <HAL_TIM_PWM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001252:	f000 f8ef 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4619      	mov	r1, r3
 8001264:	4816      	ldr	r0, [pc, #88]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 8001266:	f002 fadd 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001270:	f000 f8e0 	bl	8001434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 800128c:	f001 fe68 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001296:	f000 f8cd 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2204      	movs	r2, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 80012a2:	f001 fe5d 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80012ac:	f000 f8c2 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <MX_TIM3_Init+0xfc>)
 80012b2:	f000 f981 	bl	80015b8 <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3738      	adds	r7, #56	@ 0x38
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000230 	.word	0x20000230
 80012c4:	40000400 	.word	0x40000400

080012c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MX_USART2_UART_Init+0x50>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 8001300:	f002 fafe 	bl	8003900 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130a:	f000 f893 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000278 	.word	0x20000278
 8001318:	40004400 	.word	0x40004400

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a3a      	ldr	r2, [pc, #232]	@ (8001424 <MX_GPIO_Init+0x108>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b38      	ldr	r3, [pc, #224]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a33      	ldr	r2, [pc, #204]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a2c      	ldr	r2, [pc, #176]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <MX_GPIO_Init+0x108>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <MX_GPIO_Init+0x108>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a25      	ldr	r2, [pc, #148]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <MX_GPIO_Init+0x108>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a8:	481f      	ldr	r0, [pc, #124]	@ (8001428 <MX_GPIO_Init+0x10c>)
 80013aa:	f000 fe27 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2180      	movs	r1, #128	@ 0x80
 80013b2:	481e      	ldr	r0, [pc, #120]	@ (800142c <MX_GPIO_Init+0x110>)
 80013b4:	f000 fe22 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor2_IN1_Pin|Motor1_IN2_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80013be:	481c      	ldr	r0, [pc, #112]	@ (8001430 <MX_GPIO_Init+0x114>)
 80013c0:	f000 fe1c 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Motor2_IN2_Pin */
  GPIO_InitStruct.Pin = Motor2_IN2_Pin;
 80013c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor2_IN2_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4812      	ldr	r0, [pc, #72]	@ (8001428 <MX_GPIO_Init+0x10c>)
 80013de:	f000 fc89 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor1_IN1_Pin */
  GPIO_InitStruct.Pin = Motor1_IN1_Pin;
 80013e2:	2380      	movs	r3, #128	@ 0x80
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor1_IN1_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <MX_GPIO_Init+0x110>)
 80013fa:	f000 fc7b 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor2_IN1_Pin Motor1_IN2_Pin */
  GPIO_InitStruct.Pin = Motor2_IN1_Pin|Motor1_IN2_Pin;
 80013fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	@ (8001430 <MX_GPIO_Init+0x114>)
 8001418:	f000 fc6c 	bl	8001cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	@ 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020000 	.word	0x40020000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <Error_Handler+0x8>

08001440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_MspInit+0x4c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	@ (8001514 <HAL_I2C_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12c      	bne.n	800150c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	@ (800151c <HAL_I2C_MspInit+0x8c>)
 80014ec:	f000 fc02 	bl	8001cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a07      	ldr	r2, [pc, #28]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	@ 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40005400 	.word	0x40005400
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1f      	ldr	r2, [pc, #124]	@ (80015ac <HAL_TIM_Base_MspInit+0x8c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10e      	bne.n	8001550 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6453      	str	r3, [r2, #68]	@ 0x44
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800154e:	e026      	b.n	800159e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001558:	d10e      	bne.n	8001578 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
}
 8001576:	e012      	b.n	800159e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <HAL_TIM_Base_MspInit+0x94>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10d      	bne.n	800159e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	4a09      	ldr	r2, [pc, #36]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6413      	str	r3, [r2, #64]	@ 0x40
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_TIM_Base_MspInit+0x90>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
}
 800159e:	bf00      	nop
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40010000 	.word	0x40010000
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40000400 	.word	0x40000400

080015b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <HAL_TIM_MspPostInit+0x68>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d11d      	bne.n	8001616 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_TIM_MspPostInit+0x6c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <HAL_TIM_MspPostInit+0x6c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_TIM_MspPostInit+0x6c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015f6:	23c0      	movs	r3, #192	@ 0xc0
 80015f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001606:	2302      	movs	r3, #2
 8001608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <HAL_TIM_MspPostInit+0x70>)
 8001612:	f000 fb6f 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40000400 	.word	0x40000400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1d      	ldr	r2, [pc, #116]	@ (80016c0 <HAL_UART_MspInit+0x94>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d133      	bne.n	80016b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_UART_MspInit+0x98>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a1b      	ldr	r2, [pc, #108]	@ (80016c4 <HAL_UART_MspInit+0x98>)
 8001658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_UART_MspInit+0x98>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_UART_MspInit+0x98>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <HAL_UART_MspInit+0x98>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_UART_MspInit+0x98>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001686:	230c      	movs	r3, #12
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001696:	2307      	movs	r3, #7
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4809      	ldr	r0, [pc, #36]	@ (80016c8 <HAL_UART_MspInit+0x9c>)
 80016a2:	f000 fb27 	bl	8001cf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2026      	movs	r0, #38	@ 0x26
 80016ac:	f000 fa59 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016b0:	2026      	movs	r0, #38	@ 0x26
 80016b2:	f000 fa72 	bl	8001b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	@ 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40004400 	.word	0x40004400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <NMI_Handler+0x4>

080016d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <MemManage_Handler+0x4>

080016e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001722:	f000 f923 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <USART2_IRQHandler+0x10>)
 8001732:	f002 f9e5 	bl	8003b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000278 	.word	0x20000278

08001740 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
  }

  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_close>:
  }
  return len;
}

int _close(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a2:	605a      	str	r2, [r3, #4]
  return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_isatty>:

int _isatty(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ec:	4a14      	ldr	r2, [pc, #80]	@ (8001840 <_sbrk+0x5c>)
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <_sbrk+0x60>)
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <_sbrk+0x64>)
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <_sbrk+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	d207      	bcs.n	8001824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001814:	f003 fb22 	bl	8004e5c <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	220c      	movs	r2, #12
 800181c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	e009      	b.n	8001838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <_sbrk+0x64>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20020000 	.word	0x20020000
 8001844:	00000400 	.word	0x00000400
 8001848:	200002c0 	.word	0x200002c0
 800184c:	20000418 	.word	0x20000418

08001850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001878:	f7ff ffea 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	@ (80018b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	@ (80018c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f003 fae1 	bl	8004e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fb44 	bl	8000f32 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018b8:	08005a50 	.word	0x08005a50
  ldr r2, =_sbss
 80018bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018c0:	20000414 	.word	0x20000414

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 f92b 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	200f      	movs	r0, #15
 80018f8:	f000 f808 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fda0 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_InitTick+0x54>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_InitTick+0x58>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f943 	bl	8001bb6 <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f000 f90b 	bl	8001b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	@ (8001968 <HAL_InitTick+0x5c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000000 	.word	0x20000000
 8001964:	20000008 	.word	0x20000008
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008
 8001990:	200002c4 	.word	0x200002c4

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200002c4 	.word	0x200002c4

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff29 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff3e 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff31 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffa2 	bl	8001b08 <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff feda 	bl	8001994 <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d008      	beq.n	8001c00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2280      	movs	r2, #128	@ 0x80
 8001bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e052      	b.n	8001ca6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0216 	bic.w	r2, r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <HAL_DMA_Abort+0x62>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0208 	bic.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c50:	e013      	b.n	8001c7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c52:	f7ff fe9f 	bl	8001994 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d90c      	bls.n	8001c7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e015      	b.n	8001ca6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e4      	bne.n	8001c52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8c:	223f      	movs	r2, #63	@ 0x3f
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d004      	beq.n	8001ccc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2280      	movs	r2, #128	@ 0x80
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e00c      	b.n	8001ce6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2205      	movs	r2, #5
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e159      	b.n	8001fc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8148 	bne.w	8001fbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d005      	beq.n	8001d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d130      	bne.n	8001da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 0201 	and.w	r2, r3, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d017      	beq.n	8001de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d123      	bne.n	8001e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a2 	beq.w	8001fbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b57      	ldr	r3, [pc, #348]	@ (8001fdc <HAL_GPIO_Init+0x2e8>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	4a56      	ldr	r2, [pc, #344]	@ (8001fdc <HAL_GPIO_Init+0x2e8>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8a:	4b54      	ldr	r3, [pc, #336]	@ (8001fdc <HAL_GPIO_Init+0x2e8>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e96:	4a52      	ldr	r2, [pc, #328]	@ (8001fe0 <HAL_GPIO_Init+0x2ec>)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a49      	ldr	r2, [pc, #292]	@ (8001fe4 <HAL_GPIO_Init+0x2f0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x202>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a48      	ldr	r2, [pc, #288]	@ (8001fe8 <HAL_GPIO_Init+0x2f4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x1fe>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a47      	ldr	r2, [pc, #284]	@ (8001fec <HAL_GPIO_Init+0x2f8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x1fa>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a46      	ldr	r2, [pc, #280]	@ (8001ff0 <HAL_GPIO_Init+0x2fc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x1f6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a45      	ldr	r2, [pc, #276]	@ (8001ff4 <HAL_GPIO_Init+0x300>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x1f2>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e008      	b.n	8001ef8 <HAL_GPIO_Init+0x204>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x204>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x204>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x204>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x204>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f002 0203 	and.w	r2, r2, #3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f08:	4935      	ldr	r1, [pc, #212]	@ (8001fe0 <HAL_GPIO_Init+0x2ec>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f64:	4a24      	ldr	r2, [pc, #144]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f94:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	f67f aea2 	bls.w	8001d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	@ 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020c00 	.word	0x40020c00
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40013c00 	.word	0x40013c00

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e12b      	b.n	800229a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fa1a 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	@ 0x24
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002094:	f000 fd80 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8002098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a81      	ldr	r2, [pc, #516]	@ (80022a4 <HAL_I2C_Init+0x274>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d807      	bhi.n	80020b4 <HAL_I2C_Init+0x84>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a80      	ldr	r2, [pc, #512]	@ (80022a8 <HAL_I2C_Init+0x278>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	bf94      	ite	ls
 80020ac:	2301      	movls	r3, #1
 80020ae:	2300      	movhi	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e006      	b.n	80020c2 <HAL_I2C_Init+0x92>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a7d      	ldr	r2, [pc, #500]	@ (80022ac <HAL_I2C_Init+0x27c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	bf94      	ite	ls
 80020bc:	2301      	movls	r3, #1
 80020be:	2300      	movhi	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0e7      	b.n	800229a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a78      	ldr	r2, [pc, #480]	@ (80022b0 <HAL_I2C_Init+0x280>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0c9b      	lsrs	r3, r3, #18
 80020d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a6a      	ldr	r2, [pc, #424]	@ (80022a4 <HAL_I2C_Init+0x274>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d802      	bhi.n	8002104 <HAL_I2C_Init+0xd4>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	e009      	b.n	8002118 <HAL_I2C_Init+0xe8>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a69      	ldr	r2, [pc, #420]	@ (80022b4 <HAL_I2C_Init+0x284>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	3301      	adds	r3, #1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800212a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	495c      	ldr	r1, [pc, #368]	@ (80022a4 <HAL_I2C_Init+0x274>)
 8002134:	428b      	cmp	r3, r1
 8002136:	d819      	bhi.n	800216c <HAL_I2C_Init+0x13c>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e59      	subs	r1, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fbb1 f3f3 	udiv	r3, r1, r3
 8002146:	1c59      	adds	r1, r3, #1
 8002148:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800214c:	400b      	ands	r3, r1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_I2C_Init+0x138>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e59      	subs	r1, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002166:	e051      	b.n	800220c <HAL_I2C_Init+0x1dc>
 8002168:	2304      	movs	r3, #4
 800216a:	e04f      	b.n	800220c <HAL_I2C_Init+0x1dc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_I2C_Init+0x168>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e012      	b.n	80021be <HAL_I2C_Init+0x18e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Init+0x196>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e022      	b.n	800220c <HAL_I2C_Init+0x1dc>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10e      	bne.n	80021ec <HAL_I2C_Init+0x1bc>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e58      	subs	r0, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	440b      	add	r3, r1
 80021dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Init+0x1dc>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	6809      	ldr	r1, [r1, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800223a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6911      	ldr	r1, [r2, #16]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	4311      	orrs	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	000186a0 	.word	0x000186a0
 80022a8:	001e847f 	.word	0x001e847f
 80022ac:	003d08ff 	.word	0x003d08ff
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e267      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d075      	beq.n	80023c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d6:	4b88      	ldr	r3, [pc, #544]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d00c      	beq.n	80022fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e2:	4b85      	ldr	r3, [pc, #532]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d112      	bne.n	8002314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ee:	4b82      	ldr	r3, [pc, #520]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022fa:	d10b      	bne.n	8002314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	4b7e      	ldr	r3, [pc, #504]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d05b      	beq.n	80023c0 <HAL_RCC_OscConfig+0x108>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d157      	bne.n	80023c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e242      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800231c:	d106      	bne.n	800232c <HAL_RCC_OscConfig+0x74>
 800231e:	4b76      	ldr	r3, [pc, #472]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a75      	ldr	r2, [pc, #468]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e01d      	b.n	8002368 <HAL_RCC_OscConfig+0xb0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x98>
 8002336:	4b70      	ldr	r3, [pc, #448]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6f      	ldr	r2, [pc, #444]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b6d      	ldr	r3, [pc, #436]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6c      	ldr	r2, [pc, #432]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0xb0>
 8002350:	4b69      	ldr	r3, [pc, #420]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a68      	ldr	r2, [pc, #416]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b66      	ldr	r3, [pc, #408]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a65      	ldr	r2, [pc, #404]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff fb10 	bl	8001994 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff fb0c 	bl	8001994 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e207      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b5b      	ldr	r3, [pc, #364]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0xc0>
 8002396:	e014      	b.n	80023c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fafc 	bl	8001994 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff faf8 	bl	8001994 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	@ 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1f3      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	4b51      	ldr	r3, [pc, #324]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0xe8>
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d063      	beq.n	8002496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ce:	4b4a      	ldr	r3, [pc, #296]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023da:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d11c      	bne.n	8002420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e6:	4b44      	ldr	r3, [pc, #272]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d116      	bne.n	8002420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	4b41      	ldr	r3, [pc, #260]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_RCC_OscConfig+0x152>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e1c7      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4937      	ldr	r1, [pc, #220]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	e03a      	b.n	8002496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002428:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <HAL_RCC_OscConfig+0x244>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7ff fab1 	bl	8001994 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002436:	f7ff faad 	bl	8001994 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e1a8      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	4b2b      	ldr	r3, [pc, #172]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4925      	ldr	r1, [pc, #148]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
 8002468:	e015      	b.n	8002496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246a:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_RCC_OscConfig+0x244>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff fa90 	bl	8001994 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002478:	f7ff fa8c 	bl	8001994 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e187      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d036      	beq.n	8002510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d016      	beq.n	80024d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_RCC_OscConfig+0x248>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff fa70 	bl	8001994 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b8:	f7ff fa6c 	bl	8001994 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e167      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80024cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x200>
 80024d6:	e01b      	b.n	8002510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_RCC_OscConfig+0x248>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7ff fa59 	bl	8001994 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	e00e      	b.n	8002504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e6:	f7ff fa55 	bl	8001994 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d907      	bls.n	8002504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e150      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	42470000 	.word	0x42470000
 8002500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b88      	ldr	r3, [pc, #544]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ea      	bne.n	80024e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8097 	beq.w	800264c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b81      	ldr	r3, [pc, #516]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	4b7d      	ldr	r3, [pc, #500]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	4a7c      	ldr	r2, [pc, #496]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	@ 0x40
 800253e:	4b7a      	ldr	r3, [pc, #488]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254e:	4b77      	ldr	r3, [pc, #476]	@ (800272c <HAL_RCC_OscConfig+0x474>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255a:	4b74      	ldr	r3, [pc, #464]	@ (800272c <HAL_RCC_OscConfig+0x474>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a73      	ldr	r2, [pc, #460]	@ (800272c <HAL_RCC_OscConfig+0x474>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002566:	f7ff fa15 	bl	8001994 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256e:	f7ff fa11 	bl	8001994 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e10c      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	4b6a      	ldr	r3, [pc, #424]	@ (800272c <HAL_RCC_OscConfig+0x474>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2ea>
 8002594:	4b64      	ldr	r3, [pc, #400]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002598:	4a63      	ldr	r2, [pc, #396]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a0:	e01c      	b.n	80025dc <HAL_RCC_OscConfig+0x324>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x30c>
 80025aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0x324>
 80025c4:	4b58      	ldr	r3, [pc, #352]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	4a57      	ldr	r2, [pc, #348]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d0:	4b55      	ldr	r3, [pc, #340]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d4:	4a54      	ldr	r2, [pc, #336]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f023 0304 	bic.w	r3, r3, #4
 80025da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d015      	beq.n	8002610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7ff f9d6 	bl	8001994 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7ff f9d2 	bl	8001994 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0cb      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002602:	4b49      	ldr	r3, [pc, #292]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0ee      	beq.n	80025ec <HAL_RCC_OscConfig+0x334>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7ff f9c0 	bl	8001994 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7ff f9bc 	bl	8001994 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0b5      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262e:	4b3e      	ldr	r3, [pc, #248]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1ee      	bne.n	8002618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d105      	bne.n	800264c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002640:	4b39      	ldr	r3, [pc, #228]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	4a38      	ldr	r2, [pc, #224]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800264a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a1 	beq.w	8002798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002656:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b08      	cmp	r3, #8
 8002660:	d05c      	beq.n	800271c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d141      	bne.n	80026ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b31      	ldr	r3, [pc, #196]	@ (8002730 <HAL_RCC_OscConfig+0x478>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff f990 	bl	8001994 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002678:	f7ff f98c 	bl	8001994 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e087      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	3b01      	subs	r3, #1
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	491b      	ldr	r1, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x478>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7ff f965 	bl	8001994 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ce:	f7ff f961 	bl	8001994 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e05c      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x416>
 80026ec:	e054      	b.n	8002798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_RCC_OscConfig+0x478>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff f94e 	bl	8001994 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7ff f94a 	bl	8001994 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e045      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x444>
 800271a:	e03d      	b.n	8002798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e038      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000
 8002730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_RCC_OscConfig+0x4ec>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d028      	beq.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d121      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d11a      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800276a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	4293      	cmp	r3, r2
 800276e:	d111      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0cc      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b68      	ldr	r3, [pc, #416]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d90c      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b65      	ldr	r3, [pc, #404]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b63      	ldr	r3, [pc, #396]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0b8      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027fc:	4b59      	ldr	r3, [pc, #356]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a58      	ldr	r2, [pc, #352]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002814:	4b53      	ldr	r3, [pc, #332]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a52      	ldr	r2, [pc, #328]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800281e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b50      	ldr	r3, [pc, #320]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	494d      	ldr	r1, [pc, #308]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d044      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b47      	ldr	r3, [pc, #284]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d119      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e07f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d003      	beq.n	8002866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002862:	2b03      	cmp	r3, #3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b3f      	ldr	r3, [pc, #252]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e06f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e067      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002886:	4b37      	ldr	r3, [pc, #220]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4934      	ldr	r1, [pc, #208]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002898:	f7ff f87c 	bl	8001994 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7ff f878 	bl	8001994 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e04f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 020c 	and.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1eb      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d20c      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e032      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fc:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4916      	ldr	r1, [pc, #88]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291a:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	490e      	ldr	r1, [pc, #56]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800292e:	f000 f821 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	490a      	ldr	r1, [pc, #40]	@ (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	4a09      	ldr	r2, [pc, #36]	@ (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800294a:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe ffdc 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023c00 	.word	0x40023c00
 8002964:	40023800 	.word	0x40023800
 8002968:	080059f4 	.word	0x080059f4
 800296c:	20000000 	.word	0x20000000
 8002970:	20000004 	.word	0x20000004

08002974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	b094      	sub	sp, #80	@ 0x50
 800297a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002980:	2300      	movs	r3, #0
 8002982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002984:	2300      	movs	r3, #0
 8002986:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800298c:	4b79      	ldr	r3, [pc, #484]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d00d      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002998:	2b08      	cmp	r3, #8
 800299a:	f200 80e1 	bhi.w	8002b60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x34>
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x3a>
 80029a6:	e0db      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b73      	ldr	r3, [pc, #460]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x204>)
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80029ac:	e0db      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ae:	4b73      	ldr	r3, [pc, #460]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x208>)
 80029b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029b2:	e0d8      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029be:	4b6d      	ldr	r3, [pc, #436]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d063      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	0159      	lsls	r1, r3, #5
 80029f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f8:	0150      	lsls	r0, r2, #5
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4621      	mov	r1, r4
 8002a00:	1a51      	subs	r1, r2, r1
 8002a02:	6139      	str	r1, [r7, #16]
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a18:	4659      	mov	r1, fp
 8002a1a:	018b      	lsls	r3, r1, #6
 8002a1c:	4651      	mov	r1, sl
 8002a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a22:	4651      	mov	r1, sl
 8002a24:	018a      	lsls	r2, r1, #6
 8002a26:	4651      	mov	r1, sl
 8002a28:	ebb2 0801 	subs.w	r8, r2, r1
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a46:	4690      	mov	r8, r2
 8002a48:	4699      	mov	r9, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	eb18 0303 	adds.w	r3, r8, r3
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	462b      	mov	r3, r5
 8002a54:	eb49 0303 	adc.w	r3, r9, r3
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a66:	4629      	mov	r1, r5
 8002a68:	024b      	lsls	r3, r1, #9
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a70:	4621      	mov	r1, r4
 8002a72:	024a      	lsls	r2, r1, #9
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a84:	f7fd fc0c 	bl	80002a0 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a90:	e058      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002aac:	4642      	mov	r2, r8
 8002aae:	464b      	mov	r3, r9
 8002ab0:	f04f 0000 	mov.w	r0, #0
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	0159      	lsls	r1, r3, #5
 8002aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abe:	0150      	lsls	r0, r2, #5
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aca:	4649      	mov	r1, r9
 8002acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	00eb      	lsls	r3, r5, #3
 8002af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afa:	00e2      	lsls	r2, r4, #3
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	4643      	mov	r3, r8
 8002b02:	18e3      	adds	r3, r4, r3
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	464b      	mov	r3, r9
 8002b08:	eb45 0303 	adc.w	r3, r5, r3
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	028b      	lsls	r3, r1, #10
 8002b1e:	4621      	mov	r1, r4
 8002b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b24:	4621      	mov	r1, r4
 8002b26:	028a      	lsls	r2, r1, #10
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	61fa      	str	r2, [r7, #28]
 8002b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b38:	f7fd fbb2 	bl	80002a0 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002b54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3750      	adds	r7, #80	@ 0x50
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b9c:	f7ff fff0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a9b      	lsrs	r3, r3, #10
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	08005a04 	.word	0x08005a04

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bc4:	f7ff ffdc 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0b5b      	lsrs	r3, r3, #13
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4903      	ldr	r1, [pc, #12]	@ (8002be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	08005a04 	.word	0x08005a04

08002be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e041      	b.n	8002c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fc86 	bl	8001520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 fb24 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e041      	b.n	8002d1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f839 	bl	8002d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f000 fad5 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_TIM_PWM_Start+0x24>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e022      	b.n	8002da2 <HAL_TIM_PWM_Start+0x6a>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d109      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x3e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e015      	b.n	8002da2 <HAL_TIM_PWM_Start+0x6a>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d109      	bne.n	8002d90 <HAL_TIM_PWM_Start+0x58>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e008      	b.n	8002da2 <HAL_TIM_PWM_Start+0x6a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e068      	b.n	8002e7c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_PWM_Start+0x82>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002db8:	e013      	b.n	8002de2 <HAL_TIM_PWM_Start+0xaa>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start+0x92>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dc8:	e00b      	b.n	8002de2 <HAL_TIM_PWM_Start+0xaa>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0xa2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dd8:	e003      	b.n	8002de2 <HAL_TIM_PWM_Start+0xaa>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2201      	movs	r2, #1
 8002de8:	6839      	ldr	r1, [r7, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fcf4 	bl	80037d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a23      	ldr	r2, [pc, #140]	@ (8002e84 <HAL_TIM_PWM_Start+0x14c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d107      	bne.n	8002e0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <HAL_TIM_PWM_Start+0x14c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d018      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x10e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1c:	d013      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x10e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a19      	ldr	r2, [pc, #100]	@ (8002e88 <HAL_TIM_PWM_Start+0x150>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00e      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x10e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_TIM_PWM_Start+0x154>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x10e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_TIM_PWM_Start+0x158>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x10e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a14      	ldr	r2, [pc, #80]	@ (8002e94 <HAL_TIM_PWM_Start+0x15c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d111      	bne.n	8002e6a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d010      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e68:	e007      	b.n	8002e7a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40000800 	.word	0x40000800
 8002e90:	40000c00 	.word	0x40000c00
 8002e94:	40014000 	.word	0x40014000

08002e98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fc94 	bl	80037d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a29      	ldr	r2, [pc, #164]	@ (8002f5c <HAL_TIM_PWM_Stop+0xc4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d117      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x52>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_TIM_PWM_Stop+0x52>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <HAL_TIM_PWM_Stop+0x82>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_TIM_PWM_Stop+0x82>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_PWM_Stop+0x92>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f28:	e013      	b.n	8002f52 <HAL_TIM_PWM_Stop+0xba>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_PWM_Stop+0xa2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f38:	e00b      	b.n	8002f52 <HAL_TIM_PWM_Stop+0xba>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0xb2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f48:	e003      	b.n	8002f52 <HAL_TIM_PWM_Stop+0xba>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40010000 	.word	0x40010000

08002f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0ae      	b.n	80030dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b0c      	cmp	r3, #12
 8002f8a:	f200 809f 	bhi.w	80030cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	080030cd 	.word	0x080030cd
 8002f9c:	080030cd 	.word	0x080030cd
 8002fa0:	080030cd 	.word	0x080030cd
 8002fa4:	08003009 	.word	0x08003009
 8002fa8:	080030cd 	.word	0x080030cd
 8002fac:	080030cd 	.word	0x080030cd
 8002fb0:	080030cd 	.word	0x080030cd
 8002fb4:	0800304b 	.word	0x0800304b
 8002fb8:	080030cd 	.word	0x080030cd
 8002fbc:	080030cd 	.word	0x080030cd
 8002fc0:	080030cd 	.word	0x080030cd
 8002fc4:	0800308b 	.word	0x0800308b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f9dc 	bl	800338c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0208 	orr.w	r2, r2, #8
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0204 	bic.w	r2, r2, #4
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	619a      	str	r2, [r3, #24]
      break;
 8003006:	e064      	b.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fa22 	bl	8003458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6999      	ldr	r1, [r3, #24]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	021a      	lsls	r2, r3, #8
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]
      break;
 8003048:	e043      	b.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fa6d 	bl	8003530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0208 	orr.w	r2, r2, #8
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0204 	bic.w	r2, r2, #4
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	61da      	str	r2, [r3, #28]
      break;
 8003088:	e023      	b.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fab7 	bl	8003604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69da      	ldr	r2, [r3, #28]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69d9      	ldr	r1, [r3, #28]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	021a      	lsls	r2, r3, #8
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	61da      	str	r2, [r3, #28]
      break;
 80030ca:	e002      	b.n	80030d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
      break;
 80030d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_TIM_ConfigClockSource+0x1c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e0b4      	b.n	800326a <HAL_TIM_ConfigClockSource+0x186>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800311e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003138:	d03e      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0xd4>
 800313a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800313e:	f200 8087 	bhi.w	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003146:	f000 8086 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x172>
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314e:	d87f      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b70      	cmp	r3, #112	@ 0x70
 8003152:	d01a      	beq.n	800318a <HAL_TIM_ConfigClockSource+0xa6>
 8003154:	2b70      	cmp	r3, #112	@ 0x70
 8003156:	d87b      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b60      	cmp	r3, #96	@ 0x60
 800315a:	d050      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x11a>
 800315c:	2b60      	cmp	r3, #96	@ 0x60
 800315e:	d877      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b50      	cmp	r3, #80	@ 0x50
 8003162:	d03c      	beq.n	80031de <HAL_TIM_ConfigClockSource+0xfa>
 8003164:	2b50      	cmp	r3, #80	@ 0x50
 8003166:	d873      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003168:	2b40      	cmp	r3, #64	@ 0x40
 800316a:	d058      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x13a>
 800316c:	2b40      	cmp	r3, #64	@ 0x40
 800316e:	d86f      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003170:	2b30      	cmp	r3, #48	@ 0x30
 8003172:	d064      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15a>
 8003174:	2b30      	cmp	r3, #48	@ 0x30
 8003176:	d86b      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003178:	2b20      	cmp	r3, #32
 800317a:	d060      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15a>
 800317c:	2b20      	cmp	r3, #32
 800317e:	d867      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05c      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15a>
 8003184:	2b10      	cmp	r3, #16
 8003186:	d05a      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15a>
 8003188:	e062      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800319a:	f000 fafd 	bl	8003798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	609a      	str	r2, [r3, #8]
      break;
 80031b6:	e04f      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c8:	f000 fae6 	bl	8003798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031da:	609a      	str	r2, [r3, #8]
      break;
 80031dc:	e03c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 fa5a 	bl	80036a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2150      	movs	r1, #80	@ 0x50
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fab3 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80031fc:	e02c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800320a:	461a      	mov	r2, r3
 800320c:	f000 fa79 	bl	8003702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2160      	movs	r1, #96	@ 0x60
 8003216:	4618      	mov	r0, r3
 8003218:	f000 faa3 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 800321c:	e01c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	461a      	mov	r2, r3
 800322c:	f000 fa3a 	bl	80036a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2140      	movs	r1, #64	@ 0x40
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fa93 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 800323c:	e00c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f000 fa8a 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 800324e:	e003      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e000      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3a      	ldr	r2, [pc, #232]	@ (8003370 <TIM_Base_SetConfig+0xfc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0x38>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0x38>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a37      	ldr	r2, [pc, #220]	@ (8003374 <TIM_Base_SetConfig+0x100>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0x38>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a36      	ldr	r2, [pc, #216]	@ (8003378 <TIM_Base_SetConfig+0x104>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x38>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a35      	ldr	r2, [pc, #212]	@ (800337c <TIM_Base_SetConfig+0x108>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003370 <TIM_Base_SetConfig+0xfc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01b      	beq.n	80032fe <TIM_Base_SetConfig+0x8a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032cc:	d017      	beq.n	80032fe <TIM_Base_SetConfig+0x8a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a28      	ldr	r2, [pc, #160]	@ (8003374 <TIM_Base_SetConfig+0x100>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <TIM_Base_SetConfig+0x8a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a27      	ldr	r2, [pc, #156]	@ (8003378 <TIM_Base_SetConfig+0x104>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00f      	beq.n	80032fe <TIM_Base_SetConfig+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a26      	ldr	r2, [pc, #152]	@ (800337c <TIM_Base_SetConfig+0x108>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00b      	beq.n	80032fe <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a25      	ldr	r2, [pc, #148]	@ (8003380 <TIM_Base_SetConfig+0x10c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <TIM_Base_SetConfig+0x8a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a24      	ldr	r2, [pc, #144]	@ (8003384 <TIM_Base_SetConfig+0x110>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d003      	beq.n	80032fe <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a23      	ldr	r2, [pc, #140]	@ (8003388 <TIM_Base_SetConfig+0x114>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d108      	bne.n	8003310 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0e      	ldr	r2, [pc, #56]	@ (8003370 <TIM_Base_SetConfig+0xfc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d103      	bne.n	8003344 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f023 0201 	bic.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	611a      	str	r2, [r3, #16]
  }
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800

0800338c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 0201 	bic.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 0302 	bic.w	r3, r3, #2
 80033d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003454 <TIM_OC1_SetConfig+0xc8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10c      	bne.n	8003402 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0308 	bic.w	r3, r3, #8
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a13      	ldr	r2, [pc, #76]	@ (8003454 <TIM_OC1_SetConfig+0xc8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d111      	bne.n	800342e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40010000 	.word	0x40010000

08003458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f023 0210 	bic.w	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800348e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0320 	bic.w	r3, r3, #32
 80034a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <TIM_OC2_SetConfig+0xd4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d10d      	bne.n	80034d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a15      	ldr	r2, [pc, #84]	@ (800352c <TIM_OC2_SetConfig+0xd4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d113      	bne.n	8003504 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000

08003530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1d      	ldr	r2, [pc, #116]	@ (8003600 <TIM_OC3_SetConfig+0xd0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d10d      	bne.n	80035aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <TIM_OC3_SetConfig+0xd0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d113      	bne.n	80035da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	40010000 	.word	0x40010000

08003604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800364e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	031b      	lsls	r3, r3, #12
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a10      	ldr	r2, [pc, #64]	@ (80036a0 <TIM_OC4_SetConfig+0x9c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d109      	bne.n	8003678 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800366a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	621a      	str	r2, [r3, #32]
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010000 	.word	0x40010000

080036a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0201 	bic.w	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 030a 	bic.w	r3, r3, #10
 80036e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003702:	b480      	push	{r7}
 8003704:	b087      	sub	sp, #28
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f023 0210 	bic.w	r2, r3, #16
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800372c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	031b      	lsls	r3, r3, #12
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800373e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	f043 0307 	orr.w	r3, r3, #7
 8003784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	021a      	lsls	r2, r3, #8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	2201      	movs	r2, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1a      	ldr	r2, [r3, #32]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	401a      	ands	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1a      	ldr	r2, [r3, #32]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	431a      	orrs	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003838:	2302      	movs	r3, #2
 800383a:	e050      	b.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1c      	ldr	r2, [pc, #112]	@ (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003888:	d013      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a15      	ldr	r2, [pc, #84]	@ (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10c      	bne.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40014000 	.word	0x40014000

08003900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e042      	b.n	8003998 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd fe80 	bl	800162c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	@ 0x24
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fdbd 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	@ 0x28
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d175      	bne.n	8003aac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Transmit+0x2c>
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e06e      	b.n	8003aae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2221      	movs	r2, #33	@ 0x21
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039de:	f7fd ffd9 	bl	8001994 <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f8:	d108      	bne.n	8003a0c <HAL_UART_Transmit+0x6c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e003      	b.n	8003a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a14:	e02e      	b.n	8003a74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2180      	movs	r1, #128	@ 0x80
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fb1f 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e03a      	b.n	8003aae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10b      	bne.n	8003a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	3302      	adds	r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e007      	b.n	8003a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	3301      	adds	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1cb      	bne.n	8003a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2140      	movs	r1, #64	@ 0x40
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 faeb 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e006      	b.n	8003aae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d112      	bne.n	8003af6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_UART_Receive_IT+0x26>
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e00b      	b.n	8003af8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fb12 	bl	8004116 <UART_Start_Receive_IT>
 8003af2:	4603      	mov	r3, r0
 8003af4:	e000      	b.n	8003af8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b0ba      	sub	sp, #232	@ 0xe8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_UART_IRQHandler+0x66>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fbf2 	bl	8004348 <UART_Receive_IT>
      return;
 8003b64:	e25b      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80de 	beq.w	8003d2c <HAL_UART_IRQHandler+0x22c>
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80d1 	beq.w	8003d2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_UART_IRQHandler+0xae>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xd2>
 8003bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xf6>
 8003bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f043 0204 	orr.w	r2, r3, #4
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <HAL_UART_IRQHandler+0x126>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f043 0208 	orr.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 81f2 	beq.w	8004014 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_UART_IRQHandler+0x14e>
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb7d 	bl	8004348 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b40      	cmp	r3, #64	@ 0x40
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_UART_IRQHandler+0x17a>
 8003c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04f      	beq.n	8003d1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa85 	bl	800418a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8a:	2b40      	cmp	r3, #64	@ 0x40
 8003c8c:	d141      	bne.n	8003d12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3314      	adds	r3, #20
 8003cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1d9      	bne.n	8003c8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d013      	beq.n	8003d0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ee0 <HAL_UART_IRQHandler+0x3e0>)
 8003ce8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd ffdd 	bl	8001cae <HAL_DMA_Abort_IT>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d04:	4610      	mov	r0, r2
 8003d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	e00e      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f994 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	e00a      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f990 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e006      	b.n	8003d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f98c 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d26:	e175      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	bf00      	nop
    return;
 8003d2a:	e173      	b.n	8004014 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 814f 	bne.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8148 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8141 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d72:	2b40      	cmp	r3, #64	@ 0x40
 8003d74:	f040 80b6 	bne.w	8003ee4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8145 	beq.w	8004018 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d96:	429a      	cmp	r2, r3
 8003d98:	f080 813e 	bcs.w	8004018 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003da2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dae:	f000 8088 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1d9      	bne.n	8003db2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e1      	bne.n	8003dfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e3      	bne.n	8003e3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ea4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ea6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e3      	bne.n	8003e80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd fe86 	bl	8001bce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f8b7 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ede:	e09b      	b.n	8004018 <HAL_UART_IRQHandler+0x518>
 8003ee0:	08004251 	.word	0x08004251
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 808e 	beq.w	800401c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8089 	beq.w	800401c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e3      	bne.n	8003f0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	623b      	str	r3, [r7, #32]
   return(result);
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3314      	adds	r3, #20
 8003f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f66:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e3      	bne.n	8003f42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0310 	bic.w	r3, r3, #16
 8003f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fac:	61fa      	str	r2, [r7, #28]
 8003fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e3      	bne.n	8003f88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f83d 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fd2:	e023      	b.n	800401c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x4f4>
 8003fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f943 	bl	8004278 <UART_Transmit_IT>
    return;
 8003ff2:	e014      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <HAL_UART_IRQHandler+0x51e>
 8004000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f983 	bl	8004318 <UART_EndTransmit_IT>
    return;
 8004012:	e004      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
    return;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
      return;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_UART_IRQHandler+0x51e>
      return;
 800401c:	bf00      	nop
  }
}
 800401e:	37e8      	adds	r7, #232	@ 0xe8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004074:	e03b      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d037      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7fd fc89 	bl	8001994 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	6a3a      	ldr	r2, [r7, #32]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <UART_WaitOnFlagUntilTimeout+0x30>
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e03a      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d023      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b80      	cmp	r3, #128	@ 0x80
 80040aa:	d020      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b40      	cmp	r3, #64	@ 0x40
 80040b0:	d01d      	beq.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d116      	bne.n	80040ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f857 	bl	800418a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2208      	movs	r2, #8
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e00f      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	429a      	cmp	r2, r3
 800410a:	d0b4      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	4613      	mov	r3, r2
 8004122:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	88fa      	ldrh	r2, [r7, #6]
 800412e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2222      	movs	r2, #34	@ 0x22
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800415a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0220 	orr.w	r2, r2, #32
 800417a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800418a:	b480      	push	{r7}
 800418c:	b095      	sub	sp, #84	@ 0x54
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80041b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3314      	adds	r3, #20
 80041e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e5      	bne.n	80041c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d119      	bne.n	8004236 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	60bb      	str	r3, [r7, #8]
   return(result);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f023 0310 	bic.w	r3, r3, #16
 8004218:	647b      	str	r3, [r7, #68]	@ 0x44
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004222:	61ba      	str	r2, [r7, #24]
 8004224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6979      	ldr	r1, [r7, #20]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004244:	bf00      	nop
 8004246:	3754      	adds	r7, #84	@ 0x54
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fee4 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b21      	cmp	r3, #33	@ 0x21
 800428a:	d13e      	bne.n	800430a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004294:	d114      	bne.n	80042c0 <UART_Transmit_IT+0x48>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d110      	bne.n	80042c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]
 80042be:	e008      	b.n	80042d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6211      	str	r1, [r2, #32]
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4619      	mov	r1, r3
 80042e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004304:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800432e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff fe73 	bl	8004024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	@ 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b22      	cmp	r3, #34	@ 0x22
 800435a:	f040 80ae 	bne.w	80044ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004366:	d117      	bne.n	8004398 <UART_Receive_IT+0x50>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d113      	bne.n	8004398 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004386:	b29a      	uxth	r2, r3
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	629a      	str	r2, [r3, #40]	@ 0x28
 8004396:	e026      	b.n	80043e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043aa:	d007      	beq.n	80043bc <UART_Receive_IT+0x74>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <UART_Receive_IT+0x82>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e008      	b.n	80043dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4619      	mov	r1, r3
 80043f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d15d      	bne.n	80044b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0220 	bic.w	r2, r2, #32
 8004408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	2b01      	cmp	r3, #1
 800443e:	d135      	bne.n	80044ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	613b      	str	r3, [r7, #16]
   return(result);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004466:	623a      	str	r2, [r7, #32]
 8004468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	69f9      	ldr	r1, [r7, #28]
 800446c:	6a3a      	ldr	r2, [r7, #32]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	61bb      	str	r3, [r7, #24]
   return(result);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d10a      	bne.n	800449e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fdd1 	bl	800404c <HAL_UARTEx_RxEventCallback>
 80044aa:	e002      	b.n	80044b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fc f86f 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e002      	b.n	80044bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3730      	adds	r7, #48	@ 0x30
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b0c0      	sub	sp, #256	@ 0x100
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	68d9      	ldr	r1, [r3, #12]
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	ea40 0301 	orr.w	r3, r0, r1
 80044ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	431a      	orrs	r2, r3
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800451c:	f021 010c 	bic.w	r1, r1, #12
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800452a:	430b      	orrs	r3, r1
 800452c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453e:	6999      	ldr	r1, [r3, #24]
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	ea40 0301 	orr.w	r3, r0, r1
 800454a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b8f      	ldr	r3, [pc, #572]	@ (8004790 <UART_SetConfig+0x2cc>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d005      	beq.n	8004564 <UART_SetConfig+0xa0>
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b8d      	ldr	r3, [pc, #564]	@ (8004794 <UART_SetConfig+0x2d0>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d104      	bne.n	800456e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7fe fb2c 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8004568:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800456c:	e003      	b.n	8004576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800456e:	f7fe fb13 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8004572:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004580:	f040 810c 	bne.w	800479c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800458e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	1891      	adds	r1, r2, r2
 800459c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800459e:	415b      	adcs	r3, r3
 80045a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045a6:	4621      	mov	r1, r4
 80045a8:	eb12 0801 	adds.w	r8, r2, r1
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb43 0901 	adc.w	r9, r3, r1
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c6:	4690      	mov	r8, r2
 80045c8:	4699      	mov	r9, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	eb18 0303 	adds.w	r3, r8, r3
 80045d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045d4:	462b      	mov	r3, r5
 80045d6:	eb49 0303 	adc.w	r3, r9, r3
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045f2:	460b      	mov	r3, r1
 80045f4:	18db      	adds	r3, r3, r3
 80045f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045f8:	4613      	mov	r3, r2
 80045fa:	eb42 0303 	adc.w	r3, r2, r3
 80045fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004608:	f7fb fe4a 	bl	80002a0 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b61      	ldr	r3, [pc, #388]	@ (8004798 <UART_SetConfig+0x2d4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004624:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004634:	415b      	adcs	r3, r3
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800463c:	4641      	mov	r1, r8
 800463e:	eb12 0a01 	adds.w	sl, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb43 0b01 	adc.w	fp, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	4692      	mov	sl, r2
 800465e:	469b      	mov	fp, r3
 8004660:	4643      	mov	r3, r8
 8004662:	eb1a 0303 	adds.w	r3, sl, r3
 8004666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800466a:	464b      	mov	r3, r9
 800466c:	eb4b 0303 	adc.w	r3, fp, r3
 8004670:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004680:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	643b      	str	r3, [r7, #64]	@ 0x40
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	647b      	str	r3, [r7, #68]	@ 0x44
 8004696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800469a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800469e:	f7fb fdff 	bl	80002a0 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004798 <UART_SetConfig+0x2d4>)
 80046aa:	fba3 2301 	umull	r2, r3, r3, r1
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2264      	movs	r2, #100	@ 0x64
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	1acb      	subs	r3, r1, r3
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046be:	4b36      	ldr	r3, [pc, #216]	@ (8004798 <UART_SetConfig+0x2d4>)
 80046c0:	fba3 2302 	umull	r2, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046cc:	441c      	add	r4, r3
 80046ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046e8:	415b      	adcs	r3, r3
 80046ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046f0:	4641      	mov	r1, r8
 80046f2:	1851      	adds	r1, r2, r1
 80046f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80046f6:	4649      	mov	r1, r9
 80046f8:	414b      	adcs	r3, r1
 80046fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004708:	4659      	mov	r1, fp
 800470a:	00cb      	lsls	r3, r1, #3
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004712:	4651      	mov	r1, sl
 8004714:	00ca      	lsls	r2, r1, #3
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	4603      	mov	r3, r0
 800471c:	4642      	mov	r2, r8
 800471e:	189b      	adds	r3, r3, r2
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004724:	464b      	mov	r3, r9
 8004726:	460a      	mov	r2, r1
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800473c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004744:	460b      	mov	r3, r1
 8004746:	18db      	adds	r3, r3, r3
 8004748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800474a:	4613      	mov	r3, r2
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800475a:	f7fb fda1 	bl	80002a0 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <UART_SetConfig+0x2d4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	@ 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3332      	adds	r3, #50	@ 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	@ (8004798 <UART_SetConfig+0x2d4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800478c:	e106      	b.n	800499c <UART_SetConfig+0x4d8>
 800478e:	bf00      	nop
 8004790:	40011000 	.word	0x40011000
 8004794:	40011400 	.word	0x40011400
 8004798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	6239      	str	r1, [r7, #32]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047be:	4641      	mov	r1, r8
 80047c0:	1854      	adds	r4, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb43 0501 	adc.w	r5, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	00eb      	lsls	r3, r5, #3
 80047d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	4643      	mov	r3, r8
 80047de:	18e3      	adds	r3, r4, r3
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047e4:	464b      	mov	r3, r9
 80047e6:	eb45 0303 	adc.w	r3, r5, r3
 80047ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800480a:	4629      	mov	r1, r5
 800480c:	008b      	lsls	r3, r1, #2
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004814:	4621      	mov	r1, r4
 8004816:	008a      	lsls	r2, r1, #2
 8004818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800481c:	f7fb fd40 	bl	80002a0 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b60      	ldr	r3, [pc, #384]	@ (80049a8 <UART_SetConfig+0x4e4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004838:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800483c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	61b9      	str	r1, [r7, #24]
 8004848:	415b      	adcs	r3, r3
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6139      	str	r1, [r7, #16]
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004884:	464b      	mov	r3, r9
 8004886:	460a      	mov	r2, r1
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800489a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ba:	f7fb fcf1 	bl	80002a0 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	4b38      	ldr	r3, [pc, #224]	@ (80049a8 <UART_SetConfig+0x4e4>)
 80048c6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	2264      	movs	r2, #100	@ 0x64
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	1acb      	subs	r3, r1, r3
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	3332      	adds	r3, #50	@ 0x32
 80048d8:	4a33      	ldr	r2, [pc, #204]	@ (80049a8 <UART_SetConfig+0x4e4>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048e4:	441c      	add	r4, r3
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80048ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80048f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	415b      	adcs	r3, r3
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004904:	4641      	mov	r1, r8
 8004906:	1851      	adds	r1, r2, r1
 8004908:	6039      	str	r1, [r7, #0]
 800490a:	4649      	mov	r1, r9
 800490c:	414b      	adcs	r3, r1
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800491c:	4659      	mov	r1, fp
 800491e:	00cb      	lsls	r3, r1, #3
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004926:	4651      	mov	r1, sl
 8004928:	00ca      	lsls	r2, r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	4603      	mov	r3, r0
 8004930:	4642      	mov	r2, r8
 8004932:	189b      	adds	r3, r3, r2
 8004934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004936:	464b      	mov	r3, r9
 8004938:	460a      	mov	r2, r1
 800493a:	eb42 0303 	adc.w	r3, r2, r3
 800493e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	663b      	str	r3, [r7, #96]	@ 0x60
 800494a:	667a      	str	r2, [r7, #100]	@ 0x64
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004958:	4649      	mov	r1, r9
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	4641      	mov	r1, r8
 800495e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004962:	4641      	mov	r1, r8
 8004964:	008a      	lsls	r2, r1, #2
 8004966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800496a:	f7fb fc99 	bl	80002a0 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <UART_SetConfig+0x4e4>)
 8004974:	fba3 1302 	umull	r1, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	2164      	movs	r1, #100	@ 0x64
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	3332      	adds	r3, #50	@ 0x32
 8004986:	4a08      	ldr	r2, [pc, #32]	@ (80049a8 <UART_SetConfig+0x4e4>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	f003 020f 	and.w	r2, r3, #15
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4422      	add	r2, r4
 800499a:	609a      	str	r2, [r3, #8]
}
 800499c:	bf00      	nop
 800499e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049a2:	46bd      	mov	sp, r7
 80049a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <std>:
 80049ac:	2300      	movs	r3, #0
 80049ae:	b510      	push	{r4, lr}
 80049b0:	4604      	mov	r4, r0
 80049b2:	e9c0 3300 	strd	r3, r3, [r0]
 80049b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ba:	6083      	str	r3, [r0, #8]
 80049bc:	8181      	strh	r1, [r0, #12]
 80049be:	6643      	str	r3, [r0, #100]	@ 0x64
 80049c0:	81c2      	strh	r2, [r0, #14]
 80049c2:	6183      	str	r3, [r0, #24]
 80049c4:	4619      	mov	r1, r3
 80049c6:	2208      	movs	r2, #8
 80049c8:	305c      	adds	r0, #92	@ 0x5c
 80049ca:	f000 f9f9 	bl	8004dc0 <memset>
 80049ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <std+0x58>)
 80049d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80049d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a08 <std+0x5c>)
 80049d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80049d6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <std+0x60>)
 80049d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80049da:	4b0d      	ldr	r3, [pc, #52]	@ (8004a10 <std+0x64>)
 80049dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80049de:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <std+0x68>)
 80049e0:	6224      	str	r4, [r4, #32]
 80049e2:	429c      	cmp	r4, r3
 80049e4:	d006      	beq.n	80049f4 <std+0x48>
 80049e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80049ea:	4294      	cmp	r4, r2
 80049ec:	d002      	beq.n	80049f4 <std+0x48>
 80049ee:	33d0      	adds	r3, #208	@ 0xd0
 80049f0:	429c      	cmp	r4, r3
 80049f2:	d105      	bne.n	8004a00 <std+0x54>
 80049f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80049f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049fc:	f000 ba58 	b.w	8004eb0 <__retarget_lock_init_recursive>
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	bf00      	nop
 8004a04:	08004c11 	.word	0x08004c11
 8004a08:	08004c33 	.word	0x08004c33
 8004a0c:	08004c6b 	.word	0x08004c6b
 8004a10:	08004c8f 	.word	0x08004c8f
 8004a14:	200002c8 	.word	0x200002c8

08004a18 <stdio_exit_handler>:
 8004a18:	4a02      	ldr	r2, [pc, #8]	@ (8004a24 <stdio_exit_handler+0xc>)
 8004a1a:	4903      	ldr	r1, [pc, #12]	@ (8004a28 <stdio_exit_handler+0x10>)
 8004a1c:	4803      	ldr	r0, [pc, #12]	@ (8004a2c <stdio_exit_handler+0x14>)
 8004a1e:	f000 b869 	b.w	8004af4 <_fwalk_sglue>
 8004a22:	bf00      	nop
 8004a24:	2000000c 	.word	0x2000000c
 8004a28:	08005751 	.word	0x08005751
 8004a2c:	2000001c 	.word	0x2000001c

08004a30 <cleanup_stdio>:
 8004a30:	6841      	ldr	r1, [r0, #4]
 8004a32:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <cleanup_stdio+0x34>)
 8004a34:	4299      	cmp	r1, r3
 8004a36:	b510      	push	{r4, lr}
 8004a38:	4604      	mov	r4, r0
 8004a3a:	d001      	beq.n	8004a40 <cleanup_stdio+0x10>
 8004a3c:	f000 fe88 	bl	8005750 <_fflush_r>
 8004a40:	68a1      	ldr	r1, [r4, #8]
 8004a42:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <cleanup_stdio+0x38>)
 8004a44:	4299      	cmp	r1, r3
 8004a46:	d002      	beq.n	8004a4e <cleanup_stdio+0x1e>
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 fe81 	bl	8005750 <_fflush_r>
 8004a4e:	68e1      	ldr	r1, [r4, #12]
 8004a50:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <cleanup_stdio+0x3c>)
 8004a52:	4299      	cmp	r1, r3
 8004a54:	d004      	beq.n	8004a60 <cleanup_stdio+0x30>
 8004a56:	4620      	mov	r0, r4
 8004a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5c:	f000 be78 	b.w	8005750 <_fflush_r>
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	bf00      	nop
 8004a64:	200002c8 	.word	0x200002c8
 8004a68:	20000330 	.word	0x20000330
 8004a6c:	20000398 	.word	0x20000398

08004a70 <global_stdio_init.part.0>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <global_stdio_init.part.0+0x30>)
 8004a74:	4c0b      	ldr	r4, [pc, #44]	@ (8004aa4 <global_stdio_init.part.0+0x34>)
 8004a76:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa8 <global_stdio_init.part.0+0x38>)
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2104      	movs	r1, #4
 8004a80:	f7ff ff94 	bl	80049ac <std>
 8004a84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2109      	movs	r1, #9
 8004a8c:	f7ff ff8e 	bl	80049ac <std>
 8004a90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a94:	2202      	movs	r2, #2
 8004a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a9a:	2112      	movs	r1, #18
 8004a9c:	f7ff bf86 	b.w	80049ac <std>
 8004aa0:	20000400 	.word	0x20000400
 8004aa4:	200002c8 	.word	0x200002c8
 8004aa8:	08004a19 	.word	0x08004a19

08004aac <__sfp_lock_acquire>:
 8004aac:	4801      	ldr	r0, [pc, #4]	@ (8004ab4 <__sfp_lock_acquire+0x8>)
 8004aae:	f000 ba00 	b.w	8004eb2 <__retarget_lock_acquire_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	20000409 	.word	0x20000409

08004ab8 <__sfp_lock_release>:
 8004ab8:	4801      	ldr	r0, [pc, #4]	@ (8004ac0 <__sfp_lock_release+0x8>)
 8004aba:	f000 b9fb 	b.w	8004eb4 <__retarget_lock_release_recursive>
 8004abe:	bf00      	nop
 8004ac0:	20000409 	.word	0x20000409

08004ac4 <__sinit>:
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	f7ff fff0 	bl	8004aac <__sfp_lock_acquire>
 8004acc:	6a23      	ldr	r3, [r4, #32]
 8004ace:	b11b      	cbz	r3, 8004ad8 <__sinit+0x14>
 8004ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad4:	f7ff bff0 	b.w	8004ab8 <__sfp_lock_release>
 8004ad8:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <__sinit+0x28>)
 8004ada:	6223      	str	r3, [r4, #32]
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <__sinit+0x2c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f5      	bne.n	8004ad0 <__sinit+0xc>
 8004ae4:	f7ff ffc4 	bl	8004a70 <global_stdio_init.part.0>
 8004ae8:	e7f2      	b.n	8004ad0 <__sinit+0xc>
 8004aea:	bf00      	nop
 8004aec:	08004a31 	.word	0x08004a31
 8004af0:	20000400 	.word	0x20000400

08004af4 <_fwalk_sglue>:
 8004af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af8:	4607      	mov	r7, r0
 8004afa:	4688      	mov	r8, r1
 8004afc:	4614      	mov	r4, r2
 8004afe:	2600      	movs	r6, #0
 8004b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b04:	f1b9 0901 	subs.w	r9, r9, #1
 8004b08:	d505      	bpl.n	8004b16 <_fwalk_sglue+0x22>
 8004b0a:	6824      	ldr	r4, [r4, #0]
 8004b0c:	2c00      	cmp	r4, #0
 8004b0e:	d1f7      	bne.n	8004b00 <_fwalk_sglue+0xc>
 8004b10:	4630      	mov	r0, r6
 8004b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d907      	bls.n	8004b2c <_fwalk_sglue+0x38>
 8004b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b20:	3301      	adds	r3, #1
 8004b22:	d003      	beq.n	8004b2c <_fwalk_sglue+0x38>
 8004b24:	4629      	mov	r1, r5
 8004b26:	4638      	mov	r0, r7
 8004b28:	47c0      	blx	r8
 8004b2a:	4306      	orrs	r6, r0
 8004b2c:	3568      	adds	r5, #104	@ 0x68
 8004b2e:	e7e9      	b.n	8004b04 <_fwalk_sglue+0x10>

08004b30 <iprintf>:
 8004b30:	b40f      	push	{r0, r1, r2, r3}
 8004b32:	b507      	push	{r0, r1, r2, lr}
 8004b34:	4906      	ldr	r1, [pc, #24]	@ (8004b50 <iprintf+0x20>)
 8004b36:	ab04      	add	r3, sp, #16
 8004b38:	6808      	ldr	r0, [r1, #0]
 8004b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b3e:	6881      	ldr	r1, [r0, #8]
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	f000 fadb 	bl	80050fc <_vfiprintf_r>
 8004b46:	b003      	add	sp, #12
 8004b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b4c:	b004      	add	sp, #16
 8004b4e:	4770      	bx	lr
 8004b50:	20000018 	.word	0x20000018

08004b54 <_puts_r>:
 8004b54:	6a03      	ldr	r3, [r0, #32]
 8004b56:	b570      	push	{r4, r5, r6, lr}
 8004b58:	6884      	ldr	r4, [r0, #8]
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	460e      	mov	r6, r1
 8004b5e:	b90b      	cbnz	r3, 8004b64 <_puts_r+0x10>
 8004b60:	f7ff ffb0 	bl	8004ac4 <__sinit>
 8004b64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b66:	07db      	lsls	r3, r3, #31
 8004b68:	d405      	bmi.n	8004b76 <_puts_r+0x22>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	0598      	lsls	r0, r3, #22
 8004b6e:	d402      	bmi.n	8004b76 <_puts_r+0x22>
 8004b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b72:	f000 f99e 	bl	8004eb2 <__retarget_lock_acquire_recursive>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	0719      	lsls	r1, r3, #28
 8004b7a:	d502      	bpl.n	8004b82 <_puts_r+0x2e>
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d135      	bne.n	8004bee <_puts_r+0x9a>
 8004b82:	4621      	mov	r1, r4
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 f8c5 	bl	8004d14 <__swsetup_r>
 8004b8a:	b380      	cbz	r0, 8004bee <_puts_r+0x9a>
 8004b8c:	f04f 35ff 	mov.w	r5, #4294967295
 8004b90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b92:	07da      	lsls	r2, r3, #31
 8004b94:	d405      	bmi.n	8004ba2 <_puts_r+0x4e>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	059b      	lsls	r3, r3, #22
 8004b9a:	d402      	bmi.n	8004ba2 <_puts_r+0x4e>
 8004b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b9e:	f000 f989 	bl	8004eb4 <__retarget_lock_release_recursive>
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	bd70      	pop	{r4, r5, r6, pc}
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da04      	bge.n	8004bb4 <_puts_r+0x60>
 8004baa:	69a2      	ldr	r2, [r4, #24]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	dc17      	bgt.n	8004be0 <_puts_r+0x8c>
 8004bb0:	290a      	cmp	r1, #10
 8004bb2:	d015      	beq.n	8004be0 <_puts_r+0x8c>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	6022      	str	r2, [r4, #0]
 8004bba:	7019      	strb	r1, [r3, #0]
 8004bbc:	68a3      	ldr	r3, [r4, #8]
 8004bbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	d1ed      	bne.n	8004ba6 <_puts_r+0x52>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da11      	bge.n	8004bf2 <_puts_r+0x9e>
 8004bce:	4622      	mov	r2, r4
 8004bd0:	210a      	movs	r1, #10
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f000 f85f 	bl	8004c96 <__swbuf_r>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d0d7      	beq.n	8004b8c <_puts_r+0x38>
 8004bdc:	250a      	movs	r5, #10
 8004bde:	e7d7      	b.n	8004b90 <_puts_r+0x3c>
 8004be0:	4622      	mov	r2, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 f857 	bl	8004c96 <__swbuf_r>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d1e7      	bne.n	8004bbc <_puts_r+0x68>
 8004bec:	e7ce      	b.n	8004b8c <_puts_r+0x38>
 8004bee:	3e01      	subs	r6, #1
 8004bf0:	e7e4      	b.n	8004bbc <_puts_r+0x68>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	6022      	str	r2, [r4, #0]
 8004bf8:	220a      	movs	r2, #10
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e7ee      	b.n	8004bdc <_puts_r+0x88>
	...

08004c00 <puts>:
 8004c00:	4b02      	ldr	r3, [pc, #8]	@ (8004c0c <puts+0xc>)
 8004c02:	4601      	mov	r1, r0
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	f7ff bfa5 	b.w	8004b54 <_puts_r>
 8004c0a:	bf00      	nop
 8004c0c:	20000018 	.word	0x20000018

08004c10 <__sread>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	460c      	mov	r4, r1
 8004c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c18:	f000 f8fc 	bl	8004e14 <_read_r>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	bfab      	itete	ge
 8004c20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c22:	89a3      	ldrhlt	r3, [r4, #12]
 8004c24:	181b      	addge	r3, r3, r0
 8004c26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c2a:	bfac      	ite	ge
 8004c2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c2e:	81a3      	strhlt	r3, [r4, #12]
 8004c30:	bd10      	pop	{r4, pc}

08004c32 <__swrite>:
 8004c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c36:	461f      	mov	r7, r3
 8004c38:	898b      	ldrh	r3, [r1, #12]
 8004c3a:	05db      	lsls	r3, r3, #23
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	4616      	mov	r6, r2
 8004c42:	d505      	bpl.n	8004c50 <__swrite+0x1e>
 8004c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c48:	2302      	movs	r3, #2
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f000 f8d0 	bl	8004df0 <_lseek_r>
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	463b      	mov	r3, r7
 8004c60:	4628      	mov	r0, r5
 8004c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c66:	f000 b8e7 	b.w	8004e38 <_write_r>

08004c6a <__sseek>:
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c72:	f000 f8bd 	bl	8004df0 <_lseek_r>
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	bf15      	itete	ne
 8004c7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c86:	81a3      	strheq	r3, [r4, #12]
 8004c88:	bf18      	it	ne
 8004c8a:	81a3      	strhne	r3, [r4, #12]
 8004c8c:	bd10      	pop	{r4, pc}

08004c8e <__sclose>:
 8004c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c92:	f000 b89d 	b.w	8004dd0 <_close_r>

08004c96 <__swbuf_r>:
 8004c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c98:	460e      	mov	r6, r1
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	b118      	cbz	r0, 8004ca8 <__swbuf_r+0x12>
 8004ca0:	6a03      	ldr	r3, [r0, #32]
 8004ca2:	b90b      	cbnz	r3, 8004ca8 <__swbuf_r+0x12>
 8004ca4:	f7ff ff0e 	bl	8004ac4 <__sinit>
 8004ca8:	69a3      	ldr	r3, [r4, #24]
 8004caa:	60a3      	str	r3, [r4, #8]
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	071a      	lsls	r2, r3, #28
 8004cb0:	d501      	bpl.n	8004cb6 <__swbuf_r+0x20>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	b943      	cbnz	r3, 8004cc8 <__swbuf_r+0x32>
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f82b 	bl	8004d14 <__swsetup_r>
 8004cbe:	b118      	cbz	r0, 8004cc8 <__swbuf_r+0x32>
 8004cc0:	f04f 37ff 	mov.w	r7, #4294967295
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	6922      	ldr	r2, [r4, #16]
 8004ccc:	1a98      	subs	r0, r3, r2
 8004cce:	6963      	ldr	r3, [r4, #20]
 8004cd0:	b2f6      	uxtb	r6, r6
 8004cd2:	4283      	cmp	r3, r0
 8004cd4:	4637      	mov	r7, r6
 8004cd6:	dc05      	bgt.n	8004ce4 <__swbuf_r+0x4e>
 8004cd8:	4621      	mov	r1, r4
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 fd38 	bl	8005750 <_fflush_r>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d1ed      	bne.n	8004cc0 <__swbuf_r+0x2a>
 8004ce4:	68a3      	ldr	r3, [r4, #8]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	60a3      	str	r3, [r4, #8]
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	6022      	str	r2, [r4, #0]
 8004cf0:	701e      	strb	r6, [r3, #0]
 8004cf2:	6962      	ldr	r2, [r4, #20]
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d004      	beq.n	8004d04 <__swbuf_r+0x6e>
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	07db      	lsls	r3, r3, #31
 8004cfe:	d5e1      	bpl.n	8004cc4 <__swbuf_r+0x2e>
 8004d00:	2e0a      	cmp	r6, #10
 8004d02:	d1df      	bne.n	8004cc4 <__swbuf_r+0x2e>
 8004d04:	4621      	mov	r1, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fd22 	bl	8005750 <_fflush_r>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d0d9      	beq.n	8004cc4 <__swbuf_r+0x2e>
 8004d10:	e7d6      	b.n	8004cc0 <__swbuf_r+0x2a>
	...

08004d14 <__swsetup_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4b29      	ldr	r3, [pc, #164]	@ (8004dbc <__swsetup_r+0xa8>)
 8004d18:	4605      	mov	r5, r0
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	b118      	cbz	r0, 8004d28 <__swsetup_r+0x14>
 8004d20:	6a03      	ldr	r3, [r0, #32]
 8004d22:	b90b      	cbnz	r3, 8004d28 <__swsetup_r+0x14>
 8004d24:	f7ff fece 	bl	8004ac4 <__sinit>
 8004d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2c:	0719      	lsls	r1, r3, #28
 8004d2e:	d422      	bmi.n	8004d76 <__swsetup_r+0x62>
 8004d30:	06da      	lsls	r2, r3, #27
 8004d32:	d407      	bmi.n	8004d44 <__swsetup_r+0x30>
 8004d34:	2209      	movs	r2, #9
 8004d36:	602a      	str	r2, [r5, #0]
 8004d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d42:	e033      	b.n	8004dac <__swsetup_r+0x98>
 8004d44:	0758      	lsls	r0, r3, #29
 8004d46:	d512      	bpl.n	8004d6e <__swsetup_r+0x5a>
 8004d48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d4a:	b141      	cbz	r1, 8004d5e <__swsetup_r+0x4a>
 8004d4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d50:	4299      	cmp	r1, r3
 8004d52:	d002      	beq.n	8004d5a <__swsetup_r+0x46>
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 f8af 	bl	8004eb8 <_free_r>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	2300      	movs	r3, #0
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f043 0308 	orr.w	r3, r3, #8
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	6923      	ldr	r3, [r4, #16]
 8004d78:	b94b      	cbnz	r3, 8004d8e <__swsetup_r+0x7a>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d84:	d003      	beq.n	8004d8e <__swsetup_r+0x7a>
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 fd2f 	bl	80057ec <__smakebuf_r>
 8004d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d92:	f013 0201 	ands.w	r2, r3, #1
 8004d96:	d00a      	beq.n	8004dae <__swsetup_r+0x9a>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	60a2      	str	r2, [r4, #8]
 8004d9c:	6962      	ldr	r2, [r4, #20]
 8004d9e:	4252      	negs	r2, r2
 8004da0:	61a2      	str	r2, [r4, #24]
 8004da2:	6922      	ldr	r2, [r4, #16]
 8004da4:	b942      	cbnz	r2, 8004db8 <__swsetup_r+0xa4>
 8004da6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004daa:	d1c5      	bne.n	8004d38 <__swsetup_r+0x24>
 8004dac:	bd38      	pop	{r3, r4, r5, pc}
 8004dae:	0799      	lsls	r1, r3, #30
 8004db0:	bf58      	it	pl
 8004db2:	6962      	ldrpl	r2, [r4, #20]
 8004db4:	60a2      	str	r2, [r4, #8]
 8004db6:	e7f4      	b.n	8004da2 <__swsetup_r+0x8e>
 8004db8:	2000      	movs	r0, #0
 8004dba:	e7f7      	b.n	8004dac <__swsetup_r+0x98>
 8004dbc:	20000018 	.word	0x20000018

08004dc0 <memset>:
 8004dc0:	4402      	add	r2, r0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d100      	bne.n	8004dca <memset+0xa>
 8004dc8:	4770      	bx	lr
 8004dca:	f803 1b01 	strb.w	r1, [r3], #1
 8004dce:	e7f9      	b.n	8004dc4 <memset+0x4>

08004dd0 <_close_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d06      	ldr	r5, [pc, #24]	@ (8004dec <_close_r+0x1c>)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	602b      	str	r3, [r5, #0]
 8004ddc:	f7fc fccd 	bl	800177a <_close>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_close_r+0x1a>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_close_r+0x1a>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20000404 	.word	0x20000404

08004df0 <_lseek_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d07      	ldr	r5, [pc, #28]	@ (8004e10 <_lseek_r+0x20>)
 8004df4:	4604      	mov	r4, r0
 8004df6:	4608      	mov	r0, r1
 8004df8:	4611      	mov	r1, r2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fc fce2 	bl	80017c8 <_lseek>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_lseek_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_lseek_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20000404 	.word	0x20000404

08004e14 <_read_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d07      	ldr	r5, [pc, #28]	@ (8004e34 <_read_r+0x20>)
 8004e18:	4604      	mov	r4, r0
 8004e1a:	4608      	mov	r0, r1
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	602a      	str	r2, [r5, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7fc fc8c 	bl	8001740 <_read>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_read_r+0x1e>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_read_r+0x1e>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	20000404 	.word	0x20000404

08004e38 <_write_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4d07      	ldr	r5, [pc, #28]	@ (8004e58 <_write_r+0x20>)
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	4608      	mov	r0, r1
 8004e40:	4611      	mov	r1, r2
 8004e42:	2200      	movs	r2, #0
 8004e44:	602a      	str	r2, [r5, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f7fb fedc 	bl	8000c04 <_write>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_write_r+0x1e>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_write_r+0x1e>
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	20000404 	.word	0x20000404

08004e5c <__errno>:
 8004e5c:	4b01      	ldr	r3, [pc, #4]	@ (8004e64 <__errno+0x8>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000018 	.word	0x20000018

08004e68 <__libc_init_array>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ea0 <__libc_init_array+0x38>)
 8004e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ea4 <__libc_init_array+0x3c>)
 8004e6e:	1b64      	subs	r4, r4, r5
 8004e70:	10a4      	asrs	r4, r4, #2
 8004e72:	2600      	movs	r6, #0
 8004e74:	42a6      	cmp	r6, r4
 8004e76:	d109      	bne.n	8004e8c <__libc_init_array+0x24>
 8004e78:	4d0b      	ldr	r5, [pc, #44]	@ (8004ea8 <__libc_init_array+0x40>)
 8004e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004eac <__libc_init_array+0x44>)
 8004e7c:	f000 fd24 	bl	80058c8 <_init>
 8004e80:	1b64      	subs	r4, r4, r5
 8004e82:	10a4      	asrs	r4, r4, #2
 8004e84:	2600      	movs	r6, #0
 8004e86:	42a6      	cmp	r6, r4
 8004e88:	d105      	bne.n	8004e96 <__libc_init_array+0x2e>
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e90:	4798      	blx	r3
 8004e92:	3601      	adds	r6, #1
 8004e94:	e7ee      	b.n	8004e74 <__libc_init_array+0xc>
 8004e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e9a:	4798      	blx	r3
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	e7f2      	b.n	8004e86 <__libc_init_array+0x1e>
 8004ea0:	08005a48 	.word	0x08005a48
 8004ea4:	08005a48 	.word	0x08005a48
 8004ea8:	08005a48 	.word	0x08005a48
 8004eac:	08005a4c 	.word	0x08005a4c

08004eb0 <__retarget_lock_init_recursive>:
 8004eb0:	4770      	bx	lr

08004eb2 <__retarget_lock_acquire_recursive>:
 8004eb2:	4770      	bx	lr

08004eb4 <__retarget_lock_release_recursive>:
 8004eb4:	4770      	bx	lr
	...

08004eb8 <_free_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4605      	mov	r5, r0
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	d041      	beq.n	8004f44 <_free_r+0x8c>
 8004ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec4:	1f0c      	subs	r4, r1, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bfb8      	it	lt
 8004eca:	18e4      	addlt	r4, r4, r3
 8004ecc:	f000 f8e0 	bl	8005090 <__malloc_lock>
 8004ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <_free_r+0x90>)
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	b933      	cbnz	r3, 8004ee4 <_free_r+0x2c>
 8004ed6:	6063      	str	r3, [r4, #4]
 8004ed8:	6014      	str	r4, [r2, #0]
 8004eda:	4628      	mov	r0, r5
 8004edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee0:	f000 b8dc 	b.w	800509c <__malloc_unlock>
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	d908      	bls.n	8004efa <_free_r+0x42>
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	1821      	adds	r1, r4, r0
 8004eec:	428b      	cmp	r3, r1
 8004eee:	bf01      	itttt	eq
 8004ef0:	6819      	ldreq	r1, [r3, #0]
 8004ef2:	685b      	ldreq	r3, [r3, #4]
 8004ef4:	1809      	addeq	r1, r1, r0
 8004ef6:	6021      	streq	r1, [r4, #0]
 8004ef8:	e7ed      	b.n	8004ed6 <_free_r+0x1e>
 8004efa:	461a      	mov	r2, r3
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b10b      	cbz	r3, 8004f04 <_free_r+0x4c>
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	d9fa      	bls.n	8004efa <_free_r+0x42>
 8004f04:	6811      	ldr	r1, [r2, #0]
 8004f06:	1850      	adds	r0, r2, r1
 8004f08:	42a0      	cmp	r0, r4
 8004f0a:	d10b      	bne.n	8004f24 <_free_r+0x6c>
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	4401      	add	r1, r0
 8004f10:	1850      	adds	r0, r2, r1
 8004f12:	4283      	cmp	r3, r0
 8004f14:	6011      	str	r1, [r2, #0]
 8004f16:	d1e0      	bne.n	8004eda <_free_r+0x22>
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	6053      	str	r3, [r2, #4]
 8004f1e:	4408      	add	r0, r1
 8004f20:	6010      	str	r0, [r2, #0]
 8004f22:	e7da      	b.n	8004eda <_free_r+0x22>
 8004f24:	d902      	bls.n	8004f2c <_free_r+0x74>
 8004f26:	230c      	movs	r3, #12
 8004f28:	602b      	str	r3, [r5, #0]
 8004f2a:	e7d6      	b.n	8004eda <_free_r+0x22>
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	1821      	adds	r1, r4, r0
 8004f30:	428b      	cmp	r3, r1
 8004f32:	bf04      	itt	eq
 8004f34:	6819      	ldreq	r1, [r3, #0]
 8004f36:	685b      	ldreq	r3, [r3, #4]
 8004f38:	6063      	str	r3, [r4, #4]
 8004f3a:	bf04      	itt	eq
 8004f3c:	1809      	addeq	r1, r1, r0
 8004f3e:	6021      	streq	r1, [r4, #0]
 8004f40:	6054      	str	r4, [r2, #4]
 8004f42:	e7ca      	b.n	8004eda <_free_r+0x22>
 8004f44:	bd38      	pop	{r3, r4, r5, pc}
 8004f46:	bf00      	nop
 8004f48:	20000410 	.word	0x20000410

08004f4c <sbrk_aligned>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4e0f      	ldr	r6, [pc, #60]	@ (8004f8c <sbrk_aligned+0x40>)
 8004f50:	460c      	mov	r4, r1
 8004f52:	6831      	ldr	r1, [r6, #0]
 8004f54:	4605      	mov	r5, r0
 8004f56:	b911      	cbnz	r1, 8004f5e <sbrk_aligned+0x12>
 8004f58:	f000 fca6 	bl	80058a8 <_sbrk_r>
 8004f5c:	6030      	str	r0, [r6, #0]
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 fca1 	bl	80058a8 <_sbrk_r>
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	d103      	bne.n	8004f72 <sbrk_aligned+0x26>
 8004f6a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f6e:	4620      	mov	r0, r4
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
 8004f72:	1cc4      	adds	r4, r0, #3
 8004f74:	f024 0403 	bic.w	r4, r4, #3
 8004f78:	42a0      	cmp	r0, r4
 8004f7a:	d0f8      	beq.n	8004f6e <sbrk_aligned+0x22>
 8004f7c:	1a21      	subs	r1, r4, r0
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 fc92 	bl	80058a8 <_sbrk_r>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d1f2      	bne.n	8004f6e <sbrk_aligned+0x22>
 8004f88:	e7ef      	b.n	8004f6a <sbrk_aligned+0x1e>
 8004f8a:	bf00      	nop
 8004f8c:	2000040c 	.word	0x2000040c

08004f90 <_malloc_r>:
 8004f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f94:	1ccd      	adds	r5, r1, #3
 8004f96:	f025 0503 	bic.w	r5, r5, #3
 8004f9a:	3508      	adds	r5, #8
 8004f9c:	2d0c      	cmp	r5, #12
 8004f9e:	bf38      	it	cc
 8004fa0:	250c      	movcc	r5, #12
 8004fa2:	2d00      	cmp	r5, #0
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	db01      	blt.n	8004fac <_malloc_r+0x1c>
 8004fa8:	42a9      	cmp	r1, r5
 8004faa:	d904      	bls.n	8004fb6 <_malloc_r+0x26>
 8004fac:	230c      	movs	r3, #12
 8004fae:	6033      	str	r3, [r6, #0]
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800508c <_malloc_r+0xfc>
 8004fba:	f000 f869 	bl	8005090 <__malloc_lock>
 8004fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc2:	461c      	mov	r4, r3
 8004fc4:	bb44      	cbnz	r4, 8005018 <_malloc_r+0x88>
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f7ff ffbf 	bl	8004f4c <sbrk_aligned>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	d158      	bne.n	8005086 <_malloc_r+0xf6>
 8004fd4:	f8d8 4000 	ldr.w	r4, [r8]
 8004fd8:	4627      	mov	r7, r4
 8004fda:	2f00      	cmp	r7, #0
 8004fdc:	d143      	bne.n	8005066 <_malloc_r+0xd6>
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	d04b      	beq.n	800507a <_malloc_r+0xea>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	eb04 0903 	add.w	r9, r4, r3
 8004fec:	f000 fc5c 	bl	80058a8 <_sbrk_r>
 8004ff0:	4581      	cmp	r9, r0
 8004ff2:	d142      	bne.n	800507a <_malloc_r+0xea>
 8004ff4:	6821      	ldr	r1, [r4, #0]
 8004ff6:	1a6d      	subs	r5, r5, r1
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f7ff ffa6 	bl	8004f4c <sbrk_aligned>
 8005000:	3001      	adds	r0, #1
 8005002:	d03a      	beq.n	800507a <_malloc_r+0xea>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	442b      	add	r3, r5
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	f8d8 3000 	ldr.w	r3, [r8]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	bb62      	cbnz	r2, 800506c <_malloc_r+0xdc>
 8005012:	f8c8 7000 	str.w	r7, [r8]
 8005016:	e00f      	b.n	8005038 <_malloc_r+0xa8>
 8005018:	6822      	ldr	r2, [r4, #0]
 800501a:	1b52      	subs	r2, r2, r5
 800501c:	d420      	bmi.n	8005060 <_malloc_r+0xd0>
 800501e:	2a0b      	cmp	r2, #11
 8005020:	d917      	bls.n	8005052 <_malloc_r+0xc2>
 8005022:	1961      	adds	r1, r4, r5
 8005024:	42a3      	cmp	r3, r4
 8005026:	6025      	str	r5, [r4, #0]
 8005028:	bf18      	it	ne
 800502a:	6059      	strne	r1, [r3, #4]
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	bf08      	it	eq
 8005030:	f8c8 1000 	streq.w	r1, [r8]
 8005034:	5162      	str	r2, [r4, r5]
 8005036:	604b      	str	r3, [r1, #4]
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f82f 	bl	800509c <__malloc_unlock>
 800503e:	f104 000b 	add.w	r0, r4, #11
 8005042:	1d23      	adds	r3, r4, #4
 8005044:	f020 0007 	bic.w	r0, r0, #7
 8005048:	1ac2      	subs	r2, r0, r3
 800504a:	bf1c      	itt	ne
 800504c:	1a1b      	subne	r3, r3, r0
 800504e:	50a3      	strne	r3, [r4, r2]
 8005050:	e7af      	b.n	8004fb2 <_malloc_r+0x22>
 8005052:	6862      	ldr	r2, [r4, #4]
 8005054:	42a3      	cmp	r3, r4
 8005056:	bf0c      	ite	eq
 8005058:	f8c8 2000 	streq.w	r2, [r8]
 800505c:	605a      	strne	r2, [r3, #4]
 800505e:	e7eb      	b.n	8005038 <_malloc_r+0xa8>
 8005060:	4623      	mov	r3, r4
 8005062:	6864      	ldr	r4, [r4, #4]
 8005064:	e7ae      	b.n	8004fc4 <_malloc_r+0x34>
 8005066:	463c      	mov	r4, r7
 8005068:	687f      	ldr	r7, [r7, #4]
 800506a:	e7b6      	b.n	8004fda <_malloc_r+0x4a>
 800506c:	461a      	mov	r2, r3
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	42a3      	cmp	r3, r4
 8005072:	d1fb      	bne.n	800506c <_malloc_r+0xdc>
 8005074:	2300      	movs	r3, #0
 8005076:	6053      	str	r3, [r2, #4]
 8005078:	e7de      	b.n	8005038 <_malloc_r+0xa8>
 800507a:	230c      	movs	r3, #12
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	4630      	mov	r0, r6
 8005080:	f000 f80c 	bl	800509c <__malloc_unlock>
 8005084:	e794      	b.n	8004fb0 <_malloc_r+0x20>
 8005086:	6005      	str	r5, [r0, #0]
 8005088:	e7d6      	b.n	8005038 <_malloc_r+0xa8>
 800508a:	bf00      	nop
 800508c:	20000410 	.word	0x20000410

08005090 <__malloc_lock>:
 8005090:	4801      	ldr	r0, [pc, #4]	@ (8005098 <__malloc_lock+0x8>)
 8005092:	f7ff bf0e 	b.w	8004eb2 <__retarget_lock_acquire_recursive>
 8005096:	bf00      	nop
 8005098:	20000408 	.word	0x20000408

0800509c <__malloc_unlock>:
 800509c:	4801      	ldr	r0, [pc, #4]	@ (80050a4 <__malloc_unlock+0x8>)
 800509e:	f7ff bf09 	b.w	8004eb4 <__retarget_lock_release_recursive>
 80050a2:	bf00      	nop
 80050a4:	20000408 	.word	0x20000408

080050a8 <__sfputc_r>:
 80050a8:	6893      	ldr	r3, [r2, #8]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	b410      	push	{r4}
 80050b0:	6093      	str	r3, [r2, #8]
 80050b2:	da08      	bge.n	80050c6 <__sfputc_r+0x1e>
 80050b4:	6994      	ldr	r4, [r2, #24]
 80050b6:	42a3      	cmp	r3, r4
 80050b8:	db01      	blt.n	80050be <__sfputc_r+0x16>
 80050ba:	290a      	cmp	r1, #10
 80050bc:	d103      	bne.n	80050c6 <__sfputc_r+0x1e>
 80050be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050c2:	f7ff bde8 	b.w	8004c96 <__swbuf_r>
 80050c6:	6813      	ldr	r3, [r2, #0]
 80050c8:	1c58      	adds	r0, r3, #1
 80050ca:	6010      	str	r0, [r2, #0]
 80050cc:	7019      	strb	r1, [r3, #0]
 80050ce:	4608      	mov	r0, r1
 80050d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <__sfputs_r>:
 80050d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d8:	4606      	mov	r6, r0
 80050da:	460f      	mov	r7, r1
 80050dc:	4614      	mov	r4, r2
 80050de:	18d5      	adds	r5, r2, r3
 80050e0:	42ac      	cmp	r4, r5
 80050e2:	d101      	bne.n	80050e8 <__sfputs_r+0x12>
 80050e4:	2000      	movs	r0, #0
 80050e6:	e007      	b.n	80050f8 <__sfputs_r+0x22>
 80050e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ec:	463a      	mov	r2, r7
 80050ee:	4630      	mov	r0, r6
 80050f0:	f7ff ffda 	bl	80050a8 <__sfputc_r>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d1f3      	bne.n	80050e0 <__sfputs_r+0xa>
 80050f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050fc <_vfiprintf_r>:
 80050fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005100:	460d      	mov	r5, r1
 8005102:	b09d      	sub	sp, #116	@ 0x74
 8005104:	4614      	mov	r4, r2
 8005106:	4698      	mov	r8, r3
 8005108:	4606      	mov	r6, r0
 800510a:	b118      	cbz	r0, 8005114 <_vfiprintf_r+0x18>
 800510c:	6a03      	ldr	r3, [r0, #32]
 800510e:	b90b      	cbnz	r3, 8005114 <_vfiprintf_r+0x18>
 8005110:	f7ff fcd8 	bl	8004ac4 <__sinit>
 8005114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005116:	07d9      	lsls	r1, r3, #31
 8005118:	d405      	bmi.n	8005126 <_vfiprintf_r+0x2a>
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	059a      	lsls	r2, r3, #22
 800511e:	d402      	bmi.n	8005126 <_vfiprintf_r+0x2a>
 8005120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005122:	f7ff fec6 	bl	8004eb2 <__retarget_lock_acquire_recursive>
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	071b      	lsls	r3, r3, #28
 800512a:	d501      	bpl.n	8005130 <_vfiprintf_r+0x34>
 800512c:	692b      	ldr	r3, [r5, #16]
 800512e:	b99b      	cbnz	r3, 8005158 <_vfiprintf_r+0x5c>
 8005130:	4629      	mov	r1, r5
 8005132:	4630      	mov	r0, r6
 8005134:	f7ff fdee 	bl	8004d14 <__swsetup_r>
 8005138:	b170      	cbz	r0, 8005158 <_vfiprintf_r+0x5c>
 800513a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800513c:	07dc      	lsls	r4, r3, #31
 800513e:	d504      	bpl.n	800514a <_vfiprintf_r+0x4e>
 8005140:	f04f 30ff 	mov.w	r0, #4294967295
 8005144:	b01d      	add	sp, #116	@ 0x74
 8005146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514a:	89ab      	ldrh	r3, [r5, #12]
 800514c:	0598      	lsls	r0, r3, #22
 800514e:	d4f7      	bmi.n	8005140 <_vfiprintf_r+0x44>
 8005150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005152:	f7ff feaf 	bl	8004eb4 <__retarget_lock_release_recursive>
 8005156:	e7f3      	b.n	8005140 <_vfiprintf_r+0x44>
 8005158:	2300      	movs	r3, #0
 800515a:	9309      	str	r3, [sp, #36]	@ 0x24
 800515c:	2320      	movs	r3, #32
 800515e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005162:	f8cd 800c 	str.w	r8, [sp, #12]
 8005166:	2330      	movs	r3, #48	@ 0x30
 8005168:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005318 <_vfiprintf_r+0x21c>
 800516c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005170:	f04f 0901 	mov.w	r9, #1
 8005174:	4623      	mov	r3, r4
 8005176:	469a      	mov	sl, r3
 8005178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800517c:	b10a      	cbz	r2, 8005182 <_vfiprintf_r+0x86>
 800517e:	2a25      	cmp	r2, #37	@ 0x25
 8005180:	d1f9      	bne.n	8005176 <_vfiprintf_r+0x7a>
 8005182:	ebba 0b04 	subs.w	fp, sl, r4
 8005186:	d00b      	beq.n	80051a0 <_vfiprintf_r+0xa4>
 8005188:	465b      	mov	r3, fp
 800518a:	4622      	mov	r2, r4
 800518c:	4629      	mov	r1, r5
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff ffa1 	bl	80050d6 <__sfputs_r>
 8005194:	3001      	adds	r0, #1
 8005196:	f000 80a7 	beq.w	80052e8 <_vfiprintf_r+0x1ec>
 800519a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800519c:	445a      	add	r2, fp
 800519e:	9209      	str	r2, [sp, #36]	@ 0x24
 80051a0:	f89a 3000 	ldrb.w	r3, [sl]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 809f 	beq.w	80052e8 <_vfiprintf_r+0x1ec>
 80051aa:	2300      	movs	r3, #0
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295
 80051b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b4:	f10a 0a01 	add.w	sl, sl, #1
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	9307      	str	r3, [sp, #28]
 80051bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80051c2:	4654      	mov	r4, sl
 80051c4:	2205      	movs	r2, #5
 80051c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ca:	4853      	ldr	r0, [pc, #332]	@ (8005318 <_vfiprintf_r+0x21c>)
 80051cc:	f7fb f818 	bl	8000200 <memchr>
 80051d0:	9a04      	ldr	r2, [sp, #16]
 80051d2:	b9d8      	cbnz	r0, 800520c <_vfiprintf_r+0x110>
 80051d4:	06d1      	lsls	r1, r2, #27
 80051d6:	bf44      	itt	mi
 80051d8:	2320      	movmi	r3, #32
 80051da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051de:	0713      	lsls	r3, r2, #28
 80051e0:	bf44      	itt	mi
 80051e2:	232b      	movmi	r3, #43	@ 0x2b
 80051e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051e8:	f89a 3000 	ldrb.w	r3, [sl]
 80051ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80051ee:	d015      	beq.n	800521c <_vfiprintf_r+0x120>
 80051f0:	9a07      	ldr	r2, [sp, #28]
 80051f2:	4654      	mov	r4, sl
 80051f4:	2000      	movs	r0, #0
 80051f6:	f04f 0c0a 	mov.w	ip, #10
 80051fa:	4621      	mov	r1, r4
 80051fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005200:	3b30      	subs	r3, #48	@ 0x30
 8005202:	2b09      	cmp	r3, #9
 8005204:	d94b      	bls.n	800529e <_vfiprintf_r+0x1a2>
 8005206:	b1b0      	cbz	r0, 8005236 <_vfiprintf_r+0x13a>
 8005208:	9207      	str	r2, [sp, #28]
 800520a:	e014      	b.n	8005236 <_vfiprintf_r+0x13a>
 800520c:	eba0 0308 	sub.w	r3, r0, r8
 8005210:	fa09 f303 	lsl.w	r3, r9, r3
 8005214:	4313      	orrs	r3, r2
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	46a2      	mov	sl, r4
 800521a:	e7d2      	b.n	80051c2 <_vfiprintf_r+0xc6>
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	1d19      	adds	r1, r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	9103      	str	r1, [sp, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	bfbb      	ittet	lt
 8005228:	425b      	neglt	r3, r3
 800522a:	f042 0202 	orrlt.w	r2, r2, #2
 800522e:	9307      	strge	r3, [sp, #28]
 8005230:	9307      	strlt	r3, [sp, #28]
 8005232:	bfb8      	it	lt
 8005234:	9204      	strlt	r2, [sp, #16]
 8005236:	7823      	ldrb	r3, [r4, #0]
 8005238:	2b2e      	cmp	r3, #46	@ 0x2e
 800523a:	d10a      	bne.n	8005252 <_vfiprintf_r+0x156>
 800523c:	7863      	ldrb	r3, [r4, #1]
 800523e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005240:	d132      	bne.n	80052a8 <_vfiprintf_r+0x1ac>
 8005242:	9b03      	ldr	r3, [sp, #12]
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	9203      	str	r2, [sp, #12]
 800524a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800524e:	3402      	adds	r4, #2
 8005250:	9305      	str	r3, [sp, #20]
 8005252:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005328 <_vfiprintf_r+0x22c>
 8005256:	7821      	ldrb	r1, [r4, #0]
 8005258:	2203      	movs	r2, #3
 800525a:	4650      	mov	r0, sl
 800525c:	f7fa ffd0 	bl	8000200 <memchr>
 8005260:	b138      	cbz	r0, 8005272 <_vfiprintf_r+0x176>
 8005262:	9b04      	ldr	r3, [sp, #16]
 8005264:	eba0 000a 	sub.w	r0, r0, sl
 8005268:	2240      	movs	r2, #64	@ 0x40
 800526a:	4082      	lsls	r2, r0
 800526c:	4313      	orrs	r3, r2
 800526e:	3401      	adds	r4, #1
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005276:	4829      	ldr	r0, [pc, #164]	@ (800531c <_vfiprintf_r+0x220>)
 8005278:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800527c:	2206      	movs	r2, #6
 800527e:	f7fa ffbf 	bl	8000200 <memchr>
 8005282:	2800      	cmp	r0, #0
 8005284:	d03f      	beq.n	8005306 <_vfiprintf_r+0x20a>
 8005286:	4b26      	ldr	r3, [pc, #152]	@ (8005320 <_vfiprintf_r+0x224>)
 8005288:	bb1b      	cbnz	r3, 80052d2 <_vfiprintf_r+0x1d6>
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	3307      	adds	r3, #7
 800528e:	f023 0307 	bic.w	r3, r3, #7
 8005292:	3308      	adds	r3, #8
 8005294:	9303      	str	r3, [sp, #12]
 8005296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005298:	443b      	add	r3, r7
 800529a:	9309      	str	r3, [sp, #36]	@ 0x24
 800529c:	e76a      	b.n	8005174 <_vfiprintf_r+0x78>
 800529e:	fb0c 3202 	mla	r2, ip, r2, r3
 80052a2:	460c      	mov	r4, r1
 80052a4:	2001      	movs	r0, #1
 80052a6:	e7a8      	b.n	80051fa <_vfiprintf_r+0xfe>
 80052a8:	2300      	movs	r3, #0
 80052aa:	3401      	adds	r4, #1
 80052ac:	9305      	str	r3, [sp, #20]
 80052ae:	4619      	mov	r1, r3
 80052b0:	f04f 0c0a 	mov.w	ip, #10
 80052b4:	4620      	mov	r0, r4
 80052b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ba:	3a30      	subs	r2, #48	@ 0x30
 80052bc:	2a09      	cmp	r2, #9
 80052be:	d903      	bls.n	80052c8 <_vfiprintf_r+0x1cc>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0c6      	beq.n	8005252 <_vfiprintf_r+0x156>
 80052c4:	9105      	str	r1, [sp, #20]
 80052c6:	e7c4      	b.n	8005252 <_vfiprintf_r+0x156>
 80052c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80052cc:	4604      	mov	r4, r0
 80052ce:	2301      	movs	r3, #1
 80052d0:	e7f0      	b.n	80052b4 <_vfiprintf_r+0x1b8>
 80052d2:	ab03      	add	r3, sp, #12
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	462a      	mov	r2, r5
 80052d8:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <_vfiprintf_r+0x228>)
 80052da:	a904      	add	r1, sp, #16
 80052dc:	4630      	mov	r0, r6
 80052de:	f3af 8000 	nop.w
 80052e2:	4607      	mov	r7, r0
 80052e4:	1c78      	adds	r0, r7, #1
 80052e6:	d1d6      	bne.n	8005296 <_vfiprintf_r+0x19a>
 80052e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	d405      	bmi.n	80052fa <_vfiprintf_r+0x1fe>
 80052ee:	89ab      	ldrh	r3, [r5, #12]
 80052f0:	059a      	lsls	r2, r3, #22
 80052f2:	d402      	bmi.n	80052fa <_vfiprintf_r+0x1fe>
 80052f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052f6:	f7ff fddd 	bl	8004eb4 <__retarget_lock_release_recursive>
 80052fa:	89ab      	ldrh	r3, [r5, #12]
 80052fc:	065b      	lsls	r3, r3, #25
 80052fe:	f53f af1f 	bmi.w	8005140 <_vfiprintf_r+0x44>
 8005302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005304:	e71e      	b.n	8005144 <_vfiprintf_r+0x48>
 8005306:	ab03      	add	r3, sp, #12
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	462a      	mov	r2, r5
 800530c:	4b05      	ldr	r3, [pc, #20]	@ (8005324 <_vfiprintf_r+0x228>)
 800530e:	a904      	add	r1, sp, #16
 8005310:	4630      	mov	r0, r6
 8005312:	f000 f879 	bl	8005408 <_printf_i>
 8005316:	e7e4      	b.n	80052e2 <_vfiprintf_r+0x1e6>
 8005318:	08005a0c 	.word	0x08005a0c
 800531c:	08005a16 	.word	0x08005a16
 8005320:	00000000 	.word	0x00000000
 8005324:	080050d7 	.word	0x080050d7
 8005328:	08005a12 	.word	0x08005a12

0800532c <_printf_common>:
 800532c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	4616      	mov	r6, r2
 8005332:	4698      	mov	r8, r3
 8005334:	688a      	ldr	r2, [r1, #8]
 8005336:	690b      	ldr	r3, [r1, #16]
 8005338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800533c:	4293      	cmp	r3, r2
 800533e:	bfb8      	it	lt
 8005340:	4613      	movlt	r3, r2
 8005342:	6033      	str	r3, [r6, #0]
 8005344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005348:	4607      	mov	r7, r0
 800534a:	460c      	mov	r4, r1
 800534c:	b10a      	cbz	r2, 8005352 <_printf_common+0x26>
 800534e:	3301      	adds	r3, #1
 8005350:	6033      	str	r3, [r6, #0]
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	0699      	lsls	r1, r3, #26
 8005356:	bf42      	ittt	mi
 8005358:	6833      	ldrmi	r3, [r6, #0]
 800535a:	3302      	addmi	r3, #2
 800535c:	6033      	strmi	r3, [r6, #0]
 800535e:	6825      	ldr	r5, [r4, #0]
 8005360:	f015 0506 	ands.w	r5, r5, #6
 8005364:	d106      	bne.n	8005374 <_printf_common+0x48>
 8005366:	f104 0a19 	add.w	sl, r4, #25
 800536a:	68e3      	ldr	r3, [r4, #12]
 800536c:	6832      	ldr	r2, [r6, #0]
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	42ab      	cmp	r3, r5
 8005372:	dc26      	bgt.n	80053c2 <_printf_common+0x96>
 8005374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	3b00      	subs	r3, #0
 800537c:	bf18      	it	ne
 800537e:	2301      	movne	r3, #1
 8005380:	0692      	lsls	r2, r2, #26
 8005382:	d42b      	bmi.n	80053dc <_printf_common+0xb0>
 8005384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005388:	4641      	mov	r1, r8
 800538a:	4638      	mov	r0, r7
 800538c:	47c8      	blx	r9
 800538e:	3001      	adds	r0, #1
 8005390:	d01e      	beq.n	80053d0 <_printf_common+0xa4>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	6922      	ldr	r2, [r4, #16]
 8005396:	f003 0306 	and.w	r3, r3, #6
 800539a:	2b04      	cmp	r3, #4
 800539c:	bf02      	ittt	eq
 800539e:	68e5      	ldreq	r5, [r4, #12]
 80053a0:	6833      	ldreq	r3, [r6, #0]
 80053a2:	1aed      	subeq	r5, r5, r3
 80053a4:	68a3      	ldr	r3, [r4, #8]
 80053a6:	bf0c      	ite	eq
 80053a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053ac:	2500      	movne	r5, #0
 80053ae:	4293      	cmp	r3, r2
 80053b0:	bfc4      	itt	gt
 80053b2:	1a9b      	subgt	r3, r3, r2
 80053b4:	18ed      	addgt	r5, r5, r3
 80053b6:	2600      	movs	r6, #0
 80053b8:	341a      	adds	r4, #26
 80053ba:	42b5      	cmp	r5, r6
 80053bc:	d11a      	bne.n	80053f4 <_printf_common+0xc8>
 80053be:	2000      	movs	r0, #0
 80053c0:	e008      	b.n	80053d4 <_printf_common+0xa8>
 80053c2:	2301      	movs	r3, #1
 80053c4:	4652      	mov	r2, sl
 80053c6:	4641      	mov	r1, r8
 80053c8:	4638      	mov	r0, r7
 80053ca:	47c8      	blx	r9
 80053cc:	3001      	adds	r0, #1
 80053ce:	d103      	bne.n	80053d8 <_printf_common+0xac>
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d8:	3501      	adds	r5, #1
 80053da:	e7c6      	b.n	800536a <_printf_common+0x3e>
 80053dc:	18e1      	adds	r1, r4, r3
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	2030      	movs	r0, #48	@ 0x30
 80053e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053e6:	4422      	add	r2, r4
 80053e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053f0:	3302      	adds	r3, #2
 80053f2:	e7c7      	b.n	8005384 <_printf_common+0x58>
 80053f4:	2301      	movs	r3, #1
 80053f6:	4622      	mov	r2, r4
 80053f8:	4641      	mov	r1, r8
 80053fa:	4638      	mov	r0, r7
 80053fc:	47c8      	blx	r9
 80053fe:	3001      	adds	r0, #1
 8005400:	d0e6      	beq.n	80053d0 <_printf_common+0xa4>
 8005402:	3601      	adds	r6, #1
 8005404:	e7d9      	b.n	80053ba <_printf_common+0x8e>
	...

08005408 <_printf_i>:
 8005408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	7e0f      	ldrb	r7, [r1, #24]
 800540e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005410:	2f78      	cmp	r7, #120	@ 0x78
 8005412:	4691      	mov	r9, r2
 8005414:	4680      	mov	r8, r0
 8005416:	460c      	mov	r4, r1
 8005418:	469a      	mov	sl, r3
 800541a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800541e:	d807      	bhi.n	8005430 <_printf_i+0x28>
 8005420:	2f62      	cmp	r7, #98	@ 0x62
 8005422:	d80a      	bhi.n	800543a <_printf_i+0x32>
 8005424:	2f00      	cmp	r7, #0
 8005426:	f000 80d2 	beq.w	80055ce <_printf_i+0x1c6>
 800542a:	2f58      	cmp	r7, #88	@ 0x58
 800542c:	f000 80b9 	beq.w	80055a2 <_printf_i+0x19a>
 8005430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005434:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005438:	e03a      	b.n	80054b0 <_printf_i+0xa8>
 800543a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800543e:	2b15      	cmp	r3, #21
 8005440:	d8f6      	bhi.n	8005430 <_printf_i+0x28>
 8005442:	a101      	add	r1, pc, #4	@ (adr r1, 8005448 <_printf_i+0x40>)
 8005444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005448:	080054a1 	.word	0x080054a1
 800544c:	080054b5 	.word	0x080054b5
 8005450:	08005431 	.word	0x08005431
 8005454:	08005431 	.word	0x08005431
 8005458:	08005431 	.word	0x08005431
 800545c:	08005431 	.word	0x08005431
 8005460:	080054b5 	.word	0x080054b5
 8005464:	08005431 	.word	0x08005431
 8005468:	08005431 	.word	0x08005431
 800546c:	08005431 	.word	0x08005431
 8005470:	08005431 	.word	0x08005431
 8005474:	080055b5 	.word	0x080055b5
 8005478:	080054df 	.word	0x080054df
 800547c:	0800556f 	.word	0x0800556f
 8005480:	08005431 	.word	0x08005431
 8005484:	08005431 	.word	0x08005431
 8005488:	080055d7 	.word	0x080055d7
 800548c:	08005431 	.word	0x08005431
 8005490:	080054df 	.word	0x080054df
 8005494:	08005431 	.word	0x08005431
 8005498:	08005431 	.word	0x08005431
 800549c:	08005577 	.word	0x08005577
 80054a0:	6833      	ldr	r3, [r6, #0]
 80054a2:	1d1a      	adds	r2, r3, #4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6032      	str	r2, [r6, #0]
 80054a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054b0:	2301      	movs	r3, #1
 80054b2:	e09d      	b.n	80055f0 <_printf_i+0x1e8>
 80054b4:	6833      	ldr	r3, [r6, #0]
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	1d19      	adds	r1, r3, #4
 80054ba:	6031      	str	r1, [r6, #0]
 80054bc:	0606      	lsls	r6, r0, #24
 80054be:	d501      	bpl.n	80054c4 <_printf_i+0xbc>
 80054c0:	681d      	ldr	r5, [r3, #0]
 80054c2:	e003      	b.n	80054cc <_printf_i+0xc4>
 80054c4:	0645      	lsls	r5, r0, #25
 80054c6:	d5fb      	bpl.n	80054c0 <_printf_i+0xb8>
 80054c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054cc:	2d00      	cmp	r5, #0
 80054ce:	da03      	bge.n	80054d8 <_printf_i+0xd0>
 80054d0:	232d      	movs	r3, #45	@ 0x2d
 80054d2:	426d      	negs	r5, r5
 80054d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d8:	4859      	ldr	r0, [pc, #356]	@ (8005640 <_printf_i+0x238>)
 80054da:	230a      	movs	r3, #10
 80054dc:	e011      	b.n	8005502 <_printf_i+0xfa>
 80054de:	6821      	ldr	r1, [r4, #0]
 80054e0:	6833      	ldr	r3, [r6, #0]
 80054e2:	0608      	lsls	r0, r1, #24
 80054e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054e8:	d402      	bmi.n	80054f0 <_printf_i+0xe8>
 80054ea:	0649      	lsls	r1, r1, #25
 80054ec:	bf48      	it	mi
 80054ee:	b2ad      	uxthmi	r5, r5
 80054f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054f2:	4853      	ldr	r0, [pc, #332]	@ (8005640 <_printf_i+0x238>)
 80054f4:	6033      	str	r3, [r6, #0]
 80054f6:	bf14      	ite	ne
 80054f8:	230a      	movne	r3, #10
 80054fa:	2308      	moveq	r3, #8
 80054fc:	2100      	movs	r1, #0
 80054fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005502:	6866      	ldr	r6, [r4, #4]
 8005504:	60a6      	str	r6, [r4, #8]
 8005506:	2e00      	cmp	r6, #0
 8005508:	bfa2      	ittt	ge
 800550a:	6821      	ldrge	r1, [r4, #0]
 800550c:	f021 0104 	bicge.w	r1, r1, #4
 8005510:	6021      	strge	r1, [r4, #0]
 8005512:	b90d      	cbnz	r5, 8005518 <_printf_i+0x110>
 8005514:	2e00      	cmp	r6, #0
 8005516:	d04b      	beq.n	80055b0 <_printf_i+0x1a8>
 8005518:	4616      	mov	r6, r2
 800551a:	fbb5 f1f3 	udiv	r1, r5, r3
 800551e:	fb03 5711 	mls	r7, r3, r1, r5
 8005522:	5dc7      	ldrb	r7, [r0, r7]
 8005524:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005528:	462f      	mov	r7, r5
 800552a:	42bb      	cmp	r3, r7
 800552c:	460d      	mov	r5, r1
 800552e:	d9f4      	bls.n	800551a <_printf_i+0x112>
 8005530:	2b08      	cmp	r3, #8
 8005532:	d10b      	bne.n	800554c <_printf_i+0x144>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	07df      	lsls	r7, r3, #31
 8005538:	d508      	bpl.n	800554c <_printf_i+0x144>
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	6861      	ldr	r1, [r4, #4]
 800553e:	4299      	cmp	r1, r3
 8005540:	bfde      	ittt	le
 8005542:	2330      	movle	r3, #48	@ 0x30
 8005544:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005548:	f106 36ff 	addle.w	r6, r6, #4294967295
 800554c:	1b92      	subs	r2, r2, r6
 800554e:	6122      	str	r2, [r4, #16]
 8005550:	f8cd a000 	str.w	sl, [sp]
 8005554:	464b      	mov	r3, r9
 8005556:	aa03      	add	r2, sp, #12
 8005558:	4621      	mov	r1, r4
 800555a:	4640      	mov	r0, r8
 800555c:	f7ff fee6 	bl	800532c <_printf_common>
 8005560:	3001      	adds	r0, #1
 8005562:	d14a      	bne.n	80055fa <_printf_i+0x1f2>
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	b004      	add	sp, #16
 800556a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	f043 0320 	orr.w	r3, r3, #32
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	4833      	ldr	r0, [pc, #204]	@ (8005644 <_printf_i+0x23c>)
 8005578:	2778      	movs	r7, #120	@ 0x78
 800557a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	6831      	ldr	r1, [r6, #0]
 8005582:	061f      	lsls	r7, r3, #24
 8005584:	f851 5b04 	ldr.w	r5, [r1], #4
 8005588:	d402      	bmi.n	8005590 <_printf_i+0x188>
 800558a:	065f      	lsls	r7, r3, #25
 800558c:	bf48      	it	mi
 800558e:	b2ad      	uxthmi	r5, r5
 8005590:	6031      	str	r1, [r6, #0]
 8005592:	07d9      	lsls	r1, r3, #31
 8005594:	bf44      	itt	mi
 8005596:	f043 0320 	orrmi.w	r3, r3, #32
 800559a:	6023      	strmi	r3, [r4, #0]
 800559c:	b11d      	cbz	r5, 80055a6 <_printf_i+0x19e>
 800559e:	2310      	movs	r3, #16
 80055a0:	e7ac      	b.n	80054fc <_printf_i+0xf4>
 80055a2:	4827      	ldr	r0, [pc, #156]	@ (8005640 <_printf_i+0x238>)
 80055a4:	e7e9      	b.n	800557a <_printf_i+0x172>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	f023 0320 	bic.w	r3, r3, #32
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	e7f6      	b.n	800559e <_printf_i+0x196>
 80055b0:	4616      	mov	r6, r2
 80055b2:	e7bd      	b.n	8005530 <_printf_i+0x128>
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	6825      	ldr	r5, [r4, #0]
 80055b8:	6961      	ldr	r1, [r4, #20]
 80055ba:	1d18      	adds	r0, r3, #4
 80055bc:	6030      	str	r0, [r6, #0]
 80055be:	062e      	lsls	r6, r5, #24
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	d501      	bpl.n	80055c8 <_printf_i+0x1c0>
 80055c4:	6019      	str	r1, [r3, #0]
 80055c6:	e002      	b.n	80055ce <_printf_i+0x1c6>
 80055c8:	0668      	lsls	r0, r5, #25
 80055ca:	d5fb      	bpl.n	80055c4 <_printf_i+0x1bc>
 80055cc:	8019      	strh	r1, [r3, #0]
 80055ce:	2300      	movs	r3, #0
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	4616      	mov	r6, r2
 80055d4:	e7bc      	b.n	8005550 <_printf_i+0x148>
 80055d6:	6833      	ldr	r3, [r6, #0]
 80055d8:	1d1a      	adds	r2, r3, #4
 80055da:	6032      	str	r2, [r6, #0]
 80055dc:	681e      	ldr	r6, [r3, #0]
 80055de:	6862      	ldr	r2, [r4, #4]
 80055e0:	2100      	movs	r1, #0
 80055e2:	4630      	mov	r0, r6
 80055e4:	f7fa fe0c 	bl	8000200 <memchr>
 80055e8:	b108      	cbz	r0, 80055ee <_printf_i+0x1e6>
 80055ea:	1b80      	subs	r0, r0, r6
 80055ec:	6060      	str	r0, [r4, #4]
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	6123      	str	r3, [r4, #16]
 80055f2:	2300      	movs	r3, #0
 80055f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055f8:	e7aa      	b.n	8005550 <_printf_i+0x148>
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	4632      	mov	r2, r6
 80055fe:	4649      	mov	r1, r9
 8005600:	4640      	mov	r0, r8
 8005602:	47d0      	blx	sl
 8005604:	3001      	adds	r0, #1
 8005606:	d0ad      	beq.n	8005564 <_printf_i+0x15c>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	079b      	lsls	r3, r3, #30
 800560c:	d413      	bmi.n	8005636 <_printf_i+0x22e>
 800560e:	68e0      	ldr	r0, [r4, #12]
 8005610:	9b03      	ldr	r3, [sp, #12]
 8005612:	4298      	cmp	r0, r3
 8005614:	bfb8      	it	lt
 8005616:	4618      	movlt	r0, r3
 8005618:	e7a6      	b.n	8005568 <_printf_i+0x160>
 800561a:	2301      	movs	r3, #1
 800561c:	4632      	mov	r2, r6
 800561e:	4649      	mov	r1, r9
 8005620:	4640      	mov	r0, r8
 8005622:	47d0      	blx	sl
 8005624:	3001      	adds	r0, #1
 8005626:	d09d      	beq.n	8005564 <_printf_i+0x15c>
 8005628:	3501      	adds	r5, #1
 800562a:	68e3      	ldr	r3, [r4, #12]
 800562c:	9903      	ldr	r1, [sp, #12]
 800562e:	1a5b      	subs	r3, r3, r1
 8005630:	42ab      	cmp	r3, r5
 8005632:	dcf2      	bgt.n	800561a <_printf_i+0x212>
 8005634:	e7eb      	b.n	800560e <_printf_i+0x206>
 8005636:	2500      	movs	r5, #0
 8005638:	f104 0619 	add.w	r6, r4, #25
 800563c:	e7f5      	b.n	800562a <_printf_i+0x222>
 800563e:	bf00      	nop
 8005640:	08005a1d 	.word	0x08005a1d
 8005644:	08005a2e 	.word	0x08005a2e

08005648 <__sflush_r>:
 8005648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005650:	0716      	lsls	r6, r2, #28
 8005652:	4605      	mov	r5, r0
 8005654:	460c      	mov	r4, r1
 8005656:	d454      	bmi.n	8005702 <__sflush_r+0xba>
 8005658:	684b      	ldr	r3, [r1, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	dc02      	bgt.n	8005664 <__sflush_r+0x1c>
 800565e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	dd48      	ble.n	80056f6 <__sflush_r+0xae>
 8005664:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005666:	2e00      	cmp	r6, #0
 8005668:	d045      	beq.n	80056f6 <__sflush_r+0xae>
 800566a:	2300      	movs	r3, #0
 800566c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005670:	682f      	ldr	r7, [r5, #0]
 8005672:	6a21      	ldr	r1, [r4, #32]
 8005674:	602b      	str	r3, [r5, #0]
 8005676:	d030      	beq.n	80056da <__sflush_r+0x92>
 8005678:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	0759      	lsls	r1, r3, #29
 800567e:	d505      	bpl.n	800568c <__sflush_r+0x44>
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	1ad2      	subs	r2, r2, r3
 8005684:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005686:	b10b      	cbz	r3, 800568c <__sflush_r+0x44>
 8005688:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	2300      	movs	r3, #0
 800568e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005690:	6a21      	ldr	r1, [r4, #32]
 8005692:	4628      	mov	r0, r5
 8005694:	47b0      	blx	r6
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	d106      	bne.n	80056aa <__sflush_r+0x62>
 800569c:	6829      	ldr	r1, [r5, #0]
 800569e:	291d      	cmp	r1, #29
 80056a0:	d82b      	bhi.n	80056fa <__sflush_r+0xb2>
 80056a2:	4a2a      	ldr	r2, [pc, #168]	@ (800574c <__sflush_r+0x104>)
 80056a4:	410a      	asrs	r2, r1
 80056a6:	07d6      	lsls	r6, r2, #31
 80056a8:	d427      	bmi.n	80056fa <__sflush_r+0xb2>
 80056aa:	2200      	movs	r2, #0
 80056ac:	6062      	str	r2, [r4, #4]
 80056ae:	04d9      	lsls	r1, r3, #19
 80056b0:	6922      	ldr	r2, [r4, #16]
 80056b2:	6022      	str	r2, [r4, #0]
 80056b4:	d504      	bpl.n	80056c0 <__sflush_r+0x78>
 80056b6:	1c42      	adds	r2, r0, #1
 80056b8:	d101      	bne.n	80056be <__sflush_r+0x76>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	b903      	cbnz	r3, 80056c0 <__sflush_r+0x78>
 80056be:	6560      	str	r0, [r4, #84]	@ 0x54
 80056c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056c2:	602f      	str	r7, [r5, #0]
 80056c4:	b1b9      	cbz	r1, 80056f6 <__sflush_r+0xae>
 80056c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056ca:	4299      	cmp	r1, r3
 80056cc:	d002      	beq.n	80056d4 <__sflush_r+0x8c>
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7ff fbf2 	bl	8004eb8 <_free_r>
 80056d4:	2300      	movs	r3, #0
 80056d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80056d8:	e00d      	b.n	80056f6 <__sflush_r+0xae>
 80056da:	2301      	movs	r3, #1
 80056dc:	4628      	mov	r0, r5
 80056de:	47b0      	blx	r6
 80056e0:	4602      	mov	r2, r0
 80056e2:	1c50      	adds	r0, r2, #1
 80056e4:	d1c9      	bne.n	800567a <__sflush_r+0x32>
 80056e6:	682b      	ldr	r3, [r5, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0c6      	beq.n	800567a <__sflush_r+0x32>
 80056ec:	2b1d      	cmp	r3, #29
 80056ee:	d001      	beq.n	80056f4 <__sflush_r+0xac>
 80056f0:	2b16      	cmp	r3, #22
 80056f2:	d11e      	bne.n	8005732 <__sflush_r+0xea>
 80056f4:	602f      	str	r7, [r5, #0]
 80056f6:	2000      	movs	r0, #0
 80056f8:	e022      	b.n	8005740 <__sflush_r+0xf8>
 80056fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056fe:	b21b      	sxth	r3, r3
 8005700:	e01b      	b.n	800573a <__sflush_r+0xf2>
 8005702:	690f      	ldr	r7, [r1, #16]
 8005704:	2f00      	cmp	r7, #0
 8005706:	d0f6      	beq.n	80056f6 <__sflush_r+0xae>
 8005708:	0793      	lsls	r3, r2, #30
 800570a:	680e      	ldr	r6, [r1, #0]
 800570c:	bf08      	it	eq
 800570e:	694b      	ldreq	r3, [r1, #20]
 8005710:	600f      	str	r7, [r1, #0]
 8005712:	bf18      	it	ne
 8005714:	2300      	movne	r3, #0
 8005716:	eba6 0807 	sub.w	r8, r6, r7
 800571a:	608b      	str	r3, [r1, #8]
 800571c:	f1b8 0f00 	cmp.w	r8, #0
 8005720:	dde9      	ble.n	80056f6 <__sflush_r+0xae>
 8005722:	6a21      	ldr	r1, [r4, #32]
 8005724:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005726:	4643      	mov	r3, r8
 8005728:	463a      	mov	r2, r7
 800572a:	4628      	mov	r0, r5
 800572c:	47b0      	blx	r6
 800572e:	2800      	cmp	r0, #0
 8005730:	dc08      	bgt.n	8005744 <__sflush_r+0xfc>
 8005732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	4407      	add	r7, r0
 8005746:	eba8 0800 	sub.w	r8, r8, r0
 800574a:	e7e7      	b.n	800571c <__sflush_r+0xd4>
 800574c:	dfbffffe 	.word	0xdfbffffe

08005750 <_fflush_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	690b      	ldr	r3, [r1, #16]
 8005754:	4605      	mov	r5, r0
 8005756:	460c      	mov	r4, r1
 8005758:	b913      	cbnz	r3, 8005760 <_fflush_r+0x10>
 800575a:	2500      	movs	r5, #0
 800575c:	4628      	mov	r0, r5
 800575e:	bd38      	pop	{r3, r4, r5, pc}
 8005760:	b118      	cbz	r0, 800576a <_fflush_r+0x1a>
 8005762:	6a03      	ldr	r3, [r0, #32]
 8005764:	b90b      	cbnz	r3, 800576a <_fflush_r+0x1a>
 8005766:	f7ff f9ad 	bl	8004ac4 <__sinit>
 800576a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f3      	beq.n	800575a <_fflush_r+0xa>
 8005772:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005774:	07d0      	lsls	r0, r2, #31
 8005776:	d404      	bmi.n	8005782 <_fflush_r+0x32>
 8005778:	0599      	lsls	r1, r3, #22
 800577a:	d402      	bmi.n	8005782 <_fflush_r+0x32>
 800577c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800577e:	f7ff fb98 	bl	8004eb2 <__retarget_lock_acquire_recursive>
 8005782:	4628      	mov	r0, r5
 8005784:	4621      	mov	r1, r4
 8005786:	f7ff ff5f 	bl	8005648 <__sflush_r>
 800578a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800578c:	07da      	lsls	r2, r3, #31
 800578e:	4605      	mov	r5, r0
 8005790:	d4e4      	bmi.n	800575c <_fflush_r+0xc>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	059b      	lsls	r3, r3, #22
 8005796:	d4e1      	bmi.n	800575c <_fflush_r+0xc>
 8005798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800579a:	f7ff fb8b 	bl	8004eb4 <__retarget_lock_release_recursive>
 800579e:	e7dd      	b.n	800575c <_fflush_r+0xc>

080057a0 <__swhatbuf_r>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	460c      	mov	r4, r1
 80057a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a8:	2900      	cmp	r1, #0
 80057aa:	b096      	sub	sp, #88	@ 0x58
 80057ac:	4615      	mov	r5, r2
 80057ae:	461e      	mov	r6, r3
 80057b0:	da0d      	bge.n	80057ce <__swhatbuf_r+0x2e>
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057b8:	f04f 0100 	mov.w	r1, #0
 80057bc:	bf14      	ite	ne
 80057be:	2340      	movne	r3, #64	@ 0x40
 80057c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057c4:	2000      	movs	r0, #0
 80057c6:	6031      	str	r1, [r6, #0]
 80057c8:	602b      	str	r3, [r5, #0]
 80057ca:	b016      	add	sp, #88	@ 0x58
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
 80057ce:	466a      	mov	r2, sp
 80057d0:	f000 f848 	bl	8005864 <_fstat_r>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	dbec      	blt.n	80057b2 <__swhatbuf_r+0x12>
 80057d8:	9901      	ldr	r1, [sp, #4]
 80057da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057e2:	4259      	negs	r1, r3
 80057e4:	4159      	adcs	r1, r3
 80057e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057ea:	e7eb      	b.n	80057c4 <__swhatbuf_r+0x24>

080057ec <__smakebuf_r>:
 80057ec:	898b      	ldrh	r3, [r1, #12]
 80057ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f0:	079d      	lsls	r5, r3, #30
 80057f2:	4606      	mov	r6, r0
 80057f4:	460c      	mov	r4, r1
 80057f6:	d507      	bpl.n	8005808 <__smakebuf_r+0x1c>
 80057f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	2301      	movs	r3, #1
 8005802:	6163      	str	r3, [r4, #20]
 8005804:	b003      	add	sp, #12
 8005806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005808:	ab01      	add	r3, sp, #4
 800580a:	466a      	mov	r2, sp
 800580c:	f7ff ffc8 	bl	80057a0 <__swhatbuf_r>
 8005810:	9f00      	ldr	r7, [sp, #0]
 8005812:	4605      	mov	r5, r0
 8005814:	4639      	mov	r1, r7
 8005816:	4630      	mov	r0, r6
 8005818:	f7ff fbba 	bl	8004f90 <_malloc_r>
 800581c:	b948      	cbnz	r0, 8005832 <__smakebuf_r+0x46>
 800581e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005822:	059a      	lsls	r2, r3, #22
 8005824:	d4ee      	bmi.n	8005804 <__smakebuf_r+0x18>
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	f043 0302 	orr.w	r3, r3, #2
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	e7e2      	b.n	80057f8 <__smakebuf_r+0xc>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	6020      	str	r0, [r4, #0]
 8005836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	9b01      	ldr	r3, [sp, #4]
 800583e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005842:	b15b      	cbz	r3, 800585c <__smakebuf_r+0x70>
 8005844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005848:	4630      	mov	r0, r6
 800584a:	f000 f81d 	bl	8005888 <_isatty_r>
 800584e:	b128      	cbz	r0, 800585c <__smakebuf_r+0x70>
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	f023 0303 	bic.w	r3, r3, #3
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	81a3      	strh	r3, [r4, #12]
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	431d      	orrs	r5, r3
 8005860:	81a5      	strh	r5, [r4, #12]
 8005862:	e7cf      	b.n	8005804 <__smakebuf_r+0x18>

08005864 <_fstat_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d07      	ldr	r5, [pc, #28]	@ (8005884 <_fstat_r+0x20>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	4611      	mov	r1, r2
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	f7fb ff8e 	bl	8001792 <_fstat>
 8005876:	1c43      	adds	r3, r0, #1
 8005878:	d102      	bne.n	8005880 <_fstat_r+0x1c>
 800587a:	682b      	ldr	r3, [r5, #0]
 800587c:	b103      	cbz	r3, 8005880 <_fstat_r+0x1c>
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	bd38      	pop	{r3, r4, r5, pc}
 8005882:	bf00      	nop
 8005884:	20000404 	.word	0x20000404

08005888 <_isatty_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d06      	ldr	r5, [pc, #24]	@ (80058a4 <_isatty_r+0x1c>)
 800588c:	2300      	movs	r3, #0
 800588e:	4604      	mov	r4, r0
 8005890:	4608      	mov	r0, r1
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	f7fb ff8d 	bl	80017b2 <_isatty>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_isatty_r+0x1a>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_isatty_r+0x1a>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	20000404 	.word	0x20000404

080058a8 <_sbrk_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d06      	ldr	r5, [pc, #24]	@ (80058c4 <_sbrk_r+0x1c>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	602b      	str	r3, [r5, #0]
 80058b4:	f7fb ff96 	bl	80017e4 <_sbrk>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_sbrk_r+0x1a>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_sbrk_r+0x1a>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000404 	.word	0x20000404

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
